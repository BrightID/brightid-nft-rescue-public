{"version":3,"sources":["reportWebVitals.js","logo.png","components/react-brightid-nft-mint/src/google-play.png","components/react-brightid-nft-mint/src/open-achievements-ss.png","components/react-brightid-nft-mint/src/is-verified-ss.png","components/react-brightid-nft-mint/src/DeepLinker.js","components/react-brightid-nft-mint/src/BrightIDNftMint.js","components/react-brightid-nft-mint/src/BrightIDNftRescue.js","AppRescue.js","index.js","components/react-brightid-nft-mint/src/BrightIDNftMintModel.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DeepLinker","options","Error","hasFocus","didHide","onBlur","onVisibilityChange","e","target","visibilityState","onFocus","onReturn","onFallback","setTimeout","bindEvents","mode","window","document","forEach","conf","this","destroy","bind","openURL","url","onIgnored","location","BrightIDNftMint","registration","changePollingInterval","BrightIDNftRescue","context","contractAddr","mainnetRpcUrl","walletConnectInfuraId","relayBindURL","relayMintURL","maxSupply","appStoreAndroid","appStoreIos","brightIdMeetUrl","deepLinkPrefix","mintTokenFaucetUrl","mintChainId","mintChainName","mintTokenName","mintTokenDecimal","mintBlockExplorerUrl","mintBlockExplorerTxnPath","mintRpcUrl","verificationUrl","statePrefix","firstUpdate","useRef","useState","allowBindRetry","setAllowBindRetry","allowMode","setAllowMode","setMode","uuidHex","setUUIDHex","walletAddress","setWalletAddress","ensName","setENSName","chainId","setChainId","gasBalance","setGasBalance","canAutoSwitchNetworks","setCanAutoSwitchNetworks","qrCodeUUIDUrl","setQrCodeUUIDUrl","isUUIDLinked","setIsUUIDLinked","isBoundViaContract","setIsBoundViaContract","isMintedViaContract","setIsMintedViaContract","stepConnectWalletError","setStepConnectWalletError","stepBindViaRelayStatus","setStepBindViaRelayStatus","stepBindViaRelayError","setStepBindViaRelayError","stepRescueViaRelayStatus","setStepRescueViaRelayStatus","stepRescueViaRelayError","setStepRescueViaRelayError","linkUUIDToBrightIDError","setLinkUUIDToBrightIDError","stepSwitchToMintNetworkError","setStepSwitchToMintNetworkError","stepBoundViaContractError","setStepBoundViaContractError","isBoundViaContractTxnProcessing","setIsBoundViaContractTxnProcessing","isBoundViaContractTxnId","setIsBoundViaContractTxnId","stepMintedViaContractError","setStepMintedViaContractError","isMintedViaContractTxnProcessing","setIsMintedViaContractTxnProcessing","isMintedViaContractTxnId","setIsMintedViaContractTxnId","stepBindViaRelayProcessing","setStepBindViaRelayProcessing","stepRescueViaRelayProcessing","setStepRescueViaRelayProcessing","rescueAddress","setRescueAddress","alreadyHoldsToken","setAlreadyHoldsToken","onAccountDisconnect","a","resetWalletData","onAccountChange","initAllowMode","checkIfAlreadyHoldsNFT","initUUID","initUUIDHex","initWalletAddress","initENSName","initChainId","initGasBalance","initCanAutoSwitchNetworks","initQrCodeUUIDUrl","initIsUUIDLinked","initIsBoundViaContract","initIsMintedViaContract","onChainChanged","onChangePolling","removeEvents","console","log","web3Instance","removeListener","clearInterval","addEvents","on","setInterval","queryTokenBalance","tokenBalance","getQrCodeUUIDUrl","initRegistration","BrightIDNftMintModel","reconnectWallet","setModeGas","hasReconnectableWallet","connectWallet","message","chooseWallet","event","value","getRescueAddress","open","switchToMintNetwork","code","addMintNetwork","switchToMainnetNetwork","bindViaTransaction","isRetry","tx","hash","wait","receipt","blockNumber","Number","status","setBoundUUID","error","getIsUUIDAlreadyBoundError","resetBoundUUID","errorMessage","getBindErrorMessage","rescueFrom","rescueViaTransaction","getMintErrorMessage","getIsUUIDUnboundError","bindViaRelay","response","ok","json","body","rescueViaRelay","changeMode","sessionStorage","setItem","hasRelay","hasSwitchedToMintNetwork","hasModeSelected","stepConnectWalletComplete","getStepCompleteString","stepSwitchToMintNetworkComplete","stepObtainGasTokensComplete","stepUUIDLinkedComplete","stepBindViaRelayComplete","stepRescueViaRelayComplete","getStepActiveString","stepObtainGasTokensActive","stepBindViaRelayActive","stepUUIDLinkedActive","useEffect","current","init","className","onClick","faucetClaim","disabled","href","rel","linkUUIDToBrightID","renderAs","size","autoComplete","type","onChange","handleRescueAddressChange","placeholder","AppRescue","src","logo","alt","ReactDOM","render","StrictMode","path","element","getElementById","contractAbi","stateMutability","inputs","name","internalType","indexed","anonymous","outputs","totalSupply","brightIDLinkedWallets","isBrightIDLinked","uuid","uuidByte32","web3Modal","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","rpc","Web3Modal","network","cacheProvider","initWeb3Modal","connect","clearCachedProvider","localStorage","removeItem","initInstance","ethers","providers","Web3Provider","JsonRpcProvider","getRegistrationProvider","provider","Contract","getSigner","getProvider","JSON","parse","getItem","getProviderType","queryWalletAddress","getWalletAddress","addr","listAccounts","accounts","length","getMainnetProvider","lookupAddress","getNetwork","getBalance","balanceRaw","utils","formatEther","balanceFormatted","parseFloat","getRegistrationProviderContract","contract","totalSupplyDecimal","toString","contextId","userVerificationUrl","request","Request","method","headers","fetch","responseJson","data","contextIds","toLowerCase","balanceOf","balance","queryENSName","queryChainId","queryGasBalance","queryTotalSupply","resetUUID","newUUID","generateUUID","replaceAll","Buffer","BigNumber","from","randomBytes","toHexString","queryBrightIDLink","hasBoundUUID","initFreshInstance","params","mintHexChainId","hexlify","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","hashUUID","uuidHash","nonceBytes","nonce","readUIntBE","getUUIDHash","hashToSign","bytesDataHash","arrayify","signMessage","rawSignature","signature","standardizeSignature","slice","queryBrightIDSignature","verificationData","timestamp","v","sig","r","s","contextIdsByte32","map","getContract","filter","filters","Transfer","fromBlock","getLogs","logs","lastLog","pop","tokenIdHex","topics","tokenId","parseInt","getTokenId","getBindParams","bindParams","getContractRw","getMintParams","mintParams","mint","getRescueParams","rescueParams","stringify","getMintRelayParams","getErrorMessage","decodeErrorMessage","errorCode","toUtf8String","includes"],"mappings":"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","file":"static/js/main.73db4736.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.b1016540.png\";","export default __webpack_public_path__ + \"static/media/google-play.841fe8b4.png\";","export default __webpack_public_path__ + \"static/media/open-achievements-ss.e373cd17.png\";","export default __webpack_public_path__ + \"static/media/is-verified-ss.3e77ab12.png\";","// https://gist.github.com/diachedelic/0d60233dab3dcae3215da8a4dfdcd434\n\nfunction DeepLinker(options) {\n    if (!options) {\n        throw new Error(\"no options\");\n    }\n\n    var hasFocus = true;\n    var didHide = false;\n\n    // window is blurred when dialogs are shown\n    function onBlur() {\n        hasFocus = false;\n    }\n\n    // document is hidden when native app is shown or browser is backgrounded\n    function onVisibilityChange(e) {\n        if (e.target.visibilityState === \"hidden\") {\n            didHide = true;\n        }\n    }\n\n    // window is focused when dialogs are hidden, or browser comes into view\n    function onFocus() {\n        if (didHide) {\n            if (options.onReturn) {\n                options.onReturn();\n            }\n\n            didHide = false; // reset\n        } else {\n            // ignore duplicate focus event when returning from native app on\n            // iOS Safari 13.3+\n            if (!hasFocus && options.onFallback) {\n                // wait for app switch transition to fully complete - only then is\n                // 'visibilitychange' fired\n                setTimeout(function () {\n                    // if browser was not hidden, the deep link failed\n                    if (!didHide) {\n                        options.onFallback();\n                    }\n                }, 1000);\n            }\n        }\n\n        hasFocus = true;\n    }\n\n    // add/remove event listeners\n    // `mode` can be \"add\" or \"remove\"\n    function bindEvents(mode) {\n        [\n            [window, \"blur\", onBlur],\n            [document, \"visibilitychange\", onVisibilityChange],\n            [window, \"focus\", onFocus],\n        ].forEach(function (conf) {\n            conf[0][mode + \"EventListener\"](conf[1], conf[2]);\n        });\n    }\n\n    // add event listeners\n    bindEvents(\"add\");\n\n    // expose public API\n    this.destroy = bindEvents.bind(null, \"remove\");\n    this.openURL = function (url) {\n        // it can take a while for the dialog to appear\n        var dialogTimeout = 500;\n\n        setTimeout(function () {\n            if (hasFocus && options.onIgnored) {\n                options.onIgnored();\n            }\n        }, dialogTimeout);\n\n        window.location = url;\n    };\n}\n\nexport default DeepLinker;\n","import googlePlay from \"./google-play.png\";\nimport appStore from \"./app-store.png\";\nimport openAchievementsSS from \"./open-achievements-ss.png\";\nimport isVerifiedSS from \"./is-verified-ss.png\";\nimport \"./BrightIDNftMint.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport QRCode from \"qrcode.react\";\nimport BrightIDNftMintModel from \"./BrightIDNftMintModel\";\nimport DeepLinker from \"./DeepLinker\";\n\nlet registration;\n\nlet changePollingInterval = 0;\n\nfunction BrightIDNftMint({\n    context = \"\",\n    contractAddr = \"\",\n    mainnetRpcUrl = \"\",\n    walletConnectInfuraId = \"\",\n    relayBindURL = \"\",\n    relayMintURL = \"\",\n    maxSupply = 0,\n    appStoreAndroid = \"https://play.google.com/store/apps/details?id=org.brightid\",\n    appStoreIos = \"https://apps.apple.com/us/app/brightid/id1428946820\",\n    brightIdMeetUrl = \"https://meet.brightid.org\",\n    deepLinkPrefix = \"brightid://link-verification/http:%2f%2fnode.brightid.org\",\n    mintTokenFaucetUrl = \"https://www.gimlu.com/faucet\",\n    mintChainId = 100,\n    mintChainName = \"Gnosis Chain (formerly xDai)\",\n    mintTokenName = \"xDAI\",\n    mintTokenDecimal = 18,\n    mintBlockExplorerUrl = \"https://blockscout.com/xdai/mainnet\",\n    mintBlockExplorerTxnPath = \"/tx/\",\n    mintRpcUrl = \"https://rpc.gnosischain.com\",\n    verificationUrl = \"https://app.brightid.org/node/v5/verifications\",\n}) {\n    /* State */\n    /* ---------------------------------------------------------------------- */\n\n    const statePrefix = \"brightid-nft-mint\";\n\n    const firstUpdate = useRef(true);\n\n    const [allowBindRetry, setAllowBindRetry] = useState(false);\n\n    const [allowMode, setAllowMode] = useState(false);\n\n    const [mode, setMode] = useState(\"\");\n\n    const [uuidHex, setUUIDHex] = useState(\"\");\n\n    const [walletAddress, setWalletAddress] = useState(\"\");\n\n    const [ensName, setENSName] = useState(\"\");\n\n    const [chainId, setChainId] = useState(\"\");\n\n    // const [totalSupply, setTotalSupply] = useState(0);\n\n    const [remainingSupply, setRemainingSupply] = useState(0);\n\n    const [remainingSupplyChecked, setRemainingSupplyChecked] = useState(false);\n\n    const [gasBalance, setGasBalance] = useState(0.0);\n\n    const [canAutoSwitchNetworks, setCanAutoSwitchNetworks] = useState(false);\n\n    const [qrCodeUUIDUrl, setQrCodeUUIDUrl] = useState(\"\");\n\n    const [isUUIDLinked, setIsUUIDLinked] = useState(false);\n\n    const [isBoundViaContract, setIsBoundViaContract] = useState(false);\n\n    const [isMintedViaContract, setIsMintedViaContract] = useState(false);\n\n    const [stepConnectWalletError, setStepConnectWalletError] = useState(\"\");\n\n    const [stepBindViaRelayStatus, setStepBindViaRelayStatus] = useState(\"\");\n\n    const [stepBindViaRelayError, setStepBindViaRelayError] = useState(\"\");\n\n    const [stepMintViaRelayStatus, setStepMintViaRelayStatus] = useState(\"\");\n\n    const [stepMintViaRelayError, setStepMintViaRelayError] = useState(\"\");\n\n    const [linkUUIDToBrightIDError, setLinkUUIDToBrightIDError] = useState(\"\");\n\n    const [stepSwitchToMintNetworkError, setStepSwitchToMintNetworkError] =\n        useState(\"\");\n\n    const [stepBoundViaContractError, setStepBoundViaContractError] =\n        useState(\"\");\n\n    const [\n        isBoundViaContractTxnProcessing,\n        setIsBoundViaContractTxnProcessing,\n    ] = useState(false);\n\n    const [isBoundViaContractTxnId, setIsBoundViaContractTxnId] =\n        useState(null);\n\n    const [stepMintedViaContractError, setStepMintedViaContractError] =\n        useState(\"\");\n\n    const [\n        isMintedViaContractTxnProcessing,\n        setIsMintedViaContractTxnProcessing,\n    ] = useState(false);\n\n    const [isMintedViaContractTxnId, setIsMintedViaContractTxnId] =\n        useState(null);\n\n    const [stepBindViaRelayProcessing, setStepBindViaRelayProcessing] =\n        useState(\"\");\n\n    const [stepMintViaRelayProcessing, setStepMintViaRelayProcessing] =\n        useState(\"\");\n\n    /* Web3 Data Init & Monitoring */\n    /* ---------------------------------------------------------------------- */\n\n    async function onAccountDisconnect() {\n        resetWalletData();\n        setMode(\"\");\n        setAllowMode(false);\n        setUUIDHex(\"\");\n        setWalletAddress(\"\");\n        setENSName(\"\");\n        setChainId(\"\");\n        setGasBalance(\"\");\n        setCanAutoSwitchNetworks(\"\");\n        setQrCodeUUIDUrl(\"\");\n        setIsUUIDLinked(\"\");\n        setIsBoundViaContract(false);\n        setIsMintedViaContract(false);\n    }\n\n    async function onAccountChange() {\n        resetWalletData();\n        initAllowMode();\n        await registration.initUUID();\n        initUUIDHex();\n        initWalletAddress();\n        initENSName();\n        initChainId();\n        initGasBalance();\n        initCanAutoSwitchNetworks();\n        initQrCodeUUIDUrl();\n        initIsUUIDLinked();\n        initIsBoundViaContract();\n        initIsMintedViaContract();\n    }\n\n    function onChainChanged() {\n        initChainId();\n    }\n\n    function onChangePolling() {\n        if (registration.gasBalance === 0 || registration.gasBalance === 0.0) {\n            initGasBalance();\n        }\n\n        if (registration.isBoundViaContract === false) {\n            initIsBoundViaContract();\n        }\n\n        if (\n            registration.isBoundViaContract === true &&\n            registration.isUUIDLinked === false\n        ) {\n            initIsUUIDLinked();\n        }\n\n        if (registration.isMintedViaContract === false) {\n            initIsMintedViaContract();\n        }\n\n        if (hasReachedMaxSupply() === false) {\n            initTotalSupply();\n        }\n    }\n\n    function removeEvents() {\n        console.log(\"remove events\");\n\n        if (typeof registration.web3Instance === \"object\") {\n            registration.web3Instance.removeListener(\n                \"accountsChanged\",\n                onAccountChange\n            );\n\n            registration.web3Instance.removeListener(\n                \"chainChanged\",\n                onChainChanged\n            );\n        }\n\n        if (changePollingInterval) {\n            clearInterval(changePollingInterval);\n        }\n    }\n\n    function addEvents() {\n        console.log(\"add events\");\n\n        if (typeof registration.web3Instance === \"object\") {\n            registration.web3Instance.on(\"accountsChanged\", onAccountChange);\n\n            registration.web3Instance.on(\"chainChanged\", onChainChanged);\n        }\n\n        changePollingInterval = setInterval(onChangePolling, 5000);\n    }\n\n    /* State Data Query */\n    /* ---------------------------------------------------------------------- */\n\n    // async function resetUUID() {\n    //     try {\n    //         console.log(\"reset\");\n    //         await registration.resetUUID();\n\n    //         setUUIDHex(registration.uuidHex);\n\n    //         await initIsBoundViaContract();\n\n    //         initIsUUIDLinked();\n    //     } catch (e) {\n    //         // console.error(e);\n    //         // console.log(e);\n    //     }\n    // }\n\n    async function resetWalletData() {\n        try {\n            await registration.resetWalletData();\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initWalletAddress() {\n        try {\n            const walletAddress = await registration.initWalletAddress();\n\n            setWalletAddress(walletAddress);\n            setStepConnectWalletError(\"\");\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initUUIDHex() {\n        try {\n            setUUIDHex(registration.uuidHex);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initENSName() {\n        try {\n            const ensName = await registration.initENSName();\n\n            setENSName(ensName);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initChainId() {\n        try {\n            const chainId = await registration.initChainId();\n\n            setChainId(chainId);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initTotalSupply() {\n        try {\n            const totalSupply = await registration.initTotalSupply();\n\n            const remainingSupply = Number(maxSupply) - Number(totalSupply);\n\n            // setTotalSupply(totalSupply);\n            setRemainingSupply(remainingSupply);\n            setRemainingSupplyChecked(true);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initGasBalance() {\n        try {\n            const gasBalance = await registration.initGasBalance();\n\n            setGasBalance(gasBalance);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initCanAutoSwitchNetworks() {\n        try {\n            const canAutoSwitchNetworks =\n                await registration.canAutoSwitchNetworks();\n\n            setCanAutoSwitchNetworks(canAutoSwitchNetworks);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initQrCodeUUIDUrl() {\n        try {\n            const qrCodeUUIDUrl = await registration.getQrCodeUUIDUrl();\n\n            setQrCodeUUIDUrl(qrCodeUUIDUrl);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initIsUUIDLinked() {\n        try {\n            const isUUIDLinked = await registration.initIsUUIDLinked();\n\n            setIsUUIDLinked(isUUIDLinked);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initIsBoundViaContract() {\n        try {\n            const isBoundViaContract =\n                await registration.initIsBoundViaContract();\n\n            // console.log(isBoundViaContract);\n\n            setIsBoundViaContract(isBoundViaContract);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initIsMintedViaContract() {\n        try {\n            const isMintedViaContract =\n                await registration.initIsMintedViaContract();\n\n            // console.log(isMintedViaContract);\n\n            setIsMintedViaContract(isMintedViaContract);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    /* Interactive Events */\n    /* ---------------------------------------------------------------------- */\n\n    function verifyWithBrightID() {\n        window.open(brightIdMeetUrl, \"_blank\");\n    }\n\n    function linkUUIDToBrightID() {\n        // window.open(qrCodeUUIDUrl);\n\n        var url = qrCodeUUIDUrl;\n\n        if (url === \"\") {\n            return;\n        }\n\n        var linker = new DeepLinker({\n            onIgnored: function () {\n                console.log(\"browser failed to respond to the deep link\");\n\n                setLinkUUIDToBrightIDError(\n                    \"Couldn't open BrightID. Scan the QR code below with the device you have BrightID installed on.\"\n                );\n            },\n            onFallback: function () {\n                console.log(\"dialog hidden or user returned to tab\");\n            },\n            onReturn: function () {\n                console.log(\"user returned to the page from the native app\");\n            },\n        });\n\n        linker.openURL(url);\n    }\n\n    async function initRegistration() {\n        if (typeof registration === \"object\") {\n            return;\n        }\n\n        console.log(\"initRegistration\");\n\n        // Initialize registration class.\n        registration = new BrightIDNftMintModel(\n            statePrefix,\n            context,\n            contractAddr,\n            mainnetRpcUrl,\n            walletConnectInfuraId,\n            relayBindURL,\n            relayMintURL,\n            maxSupply,\n            appStoreAndroid,\n            appStoreIos,\n            brightIdMeetUrl,\n            deepLinkPrefix,\n            mintTokenFaucetUrl,\n            mintChainId,\n            mintChainName,\n            mintTokenName,\n            mintTokenDecimal,\n            mintBlockExplorerUrl,\n            mintBlockExplorerTxnPath,\n            mintRpcUrl,\n            verificationUrl\n        );\n    }\n\n    async function init() {\n        await initRegistration();\n\n        initTotalSupply();\n\n        // Restore mode\n        // restoreMode(); // TEMP DISABLE GAS CHOICE\n\n        // Reconnect on Load\n        reconnectWallet();\n    }\n\n    async function initAllowMode() {\n        // const gasBalance = await registration.initGasBalance();\n\n        // if (gasBalance) {\n        //     setAllowMode(false);\n        //     setModeGas();\n        // } else {\n        //     setAllowMode(true);\n        // }\n\n        setAllowMode(false); // TEMP DISABLE GAS CHOICE\n        setModeGas(); // TEMP DISABLE GAS CHOICE\n    }\n\n    async function reconnectWallet() {\n        await initRegistration();\n\n        if (registration.hasReconnectableWallet()) {\n            connectWallet();\n        }\n    }\n\n    async function connectWallet() {\n        try {\n            setStepConnectWalletError(\"\");\n            await initRegistration();\n            removeEvents();\n            await registration.connectWallet();\n            addEvents();\n            onAccountChange();\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            onAccountDisconnect();\n\n            if (e.message === \"User Rejected\") {\n                setStepConnectWalletError(\"Unlock your wallet to continue\");\n            } else {\n                setStepConnectWalletError(e.message);\n            }\n        }\n    }\n\n    async function chooseWallet() {\n        try {\n            setStepConnectWalletError(\"\");\n            await initRegistration();\n            removeEvents();\n            await registration.chooseWallet();\n            addEvents();\n            onAccountChange();\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            onAccountDisconnect();\n\n            if (e.message === \"User Rejected\") {\n                setStepConnectWalletError(\"Unlock your wallet to continue\");\n            } else {\n                setStepConnectWalletError(e.message);\n            }\n        }\n    }\n\n    async function faucetClaim() {\n        window.open(mintTokenFaucetUrl, \"_blank\");\n    }\n\n    async function switchToMintNetwork() {\n        try {\n            await registration.switchToMintNetwork();\n\n            setStepSwitchToMintNetworkError(\"\");\n        } catch (switchError) {\n            // console.log(switchError);\n\n            // This error code indicates that the chain has not been added to MetaMask.\n            if (switchError.code === 4902) {\n                addMintNetwork();\n\n                return;\n            }\n\n            // console.error(switchError);\n            // console.log(switchError);\n\n            setStepSwitchToMintNetworkError(switchError.message);\n        }\n    }\n\n    async function switchToMainnetNetwork() {\n        try {\n            await registration.switchToMainnetNetwork();\n        } catch (switchError) {\n            // console.error(switchError);\n            // console.log(switchError);\n        }\n    }\n\n    async function addMintNetwork() {\n        try {\n            await registration.addMintNetwork();\n\n            setStepSwitchToMintNetworkError(\"\");\n        } catch (addError) {\n            // console.error(addError);\n            // console.log(addError);\n\n            setStepSwitchToMintNetworkError(addError.message);\n        }\n    }\n\n    async function bindViaTransaction(isRetry = false) {\n        try {\n            setStepBindViaRelayProcessing(true);\n\n            const tx = await registration.bindViaTransaction();\n\n            setIsBoundViaContractTxnProcessing(true);\n            setIsBoundViaContractTxnId(tx.hash);\n            setStepBoundViaContractError(\"\");\n\n            // wait for the transaction to be mined\n            const receipt = await tx.wait();\n\n            if (!receipt.blockNumber || Number(receipt.status) !== 1) {\n                throw new Error(\"Transaction failed. Please try again.\");\n            }\n\n            await registration.setBoundUUID();\n            await initIsBoundViaContract();\n\n            setStepBoundViaContractError(\"\");\n            setIsBoundViaContractTxnProcessing(false);\n            setIsBoundViaContractTxnId(null);\n            setStepBindViaRelayProcessing(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            if (\n                isRetry === false &&\n                registration.getIsUUIDAlreadyBoundError(e)\n            ) {\n                await registration.setBoundUUID();\n                await initIsBoundViaContract();\n\n                setStepBoundViaContractError(\"\");\n                setIsBoundViaContractTxnProcessing(false);\n                setIsBoundViaContractTxnId(null);\n                setStepBindViaRelayProcessing(false);\n\n                return;\n            }\n\n            await registration.resetBoundUUID();\n            await initIsBoundViaContract();\n\n            const errorMessage = registration.getBindErrorMessage(e);\n            setStepBoundViaContractError(errorMessage);\n            setIsBoundViaContractTxnProcessing(false);\n            setIsBoundViaContractTxnId(null);\n            setStepBindViaRelayProcessing(false);\n            setAllowBindRetry(false);\n        }\n    }\n\n    async function mintViaTransaction() {\n        try {\n            setStepMintViaRelayProcessing(true);\n\n            const tx = await registration.mintViaTransaction();\n\n            setIsMintedViaContractTxnProcessing(true);\n            setIsMintedViaContractTxnId(tx.hash);\n            setStepMintedViaContractError(\"\");\n\n            // wait for the transaction to be mined\n            const receipt = await tx.wait();\n\n            if (!receipt.blockNumber || Number(receipt.status) !== 1) {\n                throw new Error(\"Transaction failed. Please try again.\");\n            }\n\n            await initIsMintedViaContract();\n\n            setStepMintedViaContractError(\"\");\n            setIsMintedViaContractTxnProcessing(false);\n            setIsMintedViaContractTxnId(null);\n            setStepMintViaRelayProcessing(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            await initIsMintedViaContract();\n\n            const errorMessage = registration.getMintErrorMessage(e);\n            setStepMintedViaContractError(errorMessage);\n            setIsMintedViaContractTxnProcessing(false);\n            setIsMintedViaContractTxnId(null);\n            setStepMintViaRelayProcessing(false);\n\n            if (registration.getIsUUIDUnboundError(e)) {\n                setAllowBindRetry(true);\n            }\n        }\n    }\n\n    async function bindViaRelay(isRetry = false) {\n        try {\n            setStepBindViaRelayProcessing(true);\n\n            setStepBindViaRelayStatus(\n                \"We're binding your UUID.  This could take a minute or two. Please wait.\"\n            );\n\n            const response = await registration.bindViaRelay();\n\n            if (response.ok === false) {\n                const body = await response.json();\n\n                // console.log(body);\n                // console.log(body.error);\n                // console.log(body.error.message);\n\n                throw new Error(body.error.message);\n            }\n\n            await registration.setBoundUUID();\n            await initIsBoundViaContract();\n\n            setStepBindViaRelayError(\"\");\n            setStepBindViaRelayStatus(\"\");\n            setStepBindViaRelayProcessing(false);\n\n            setAllowBindRetry(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            if (\n                isRetry === false &&\n                registration.getIsUUIDAlreadyBoundError(e)\n            ) {\n                await registration.setBoundUUID();\n                await initIsBoundViaContract();\n\n                setStepBoundViaContractError(\"\");\n                setIsBoundViaContractTxnProcessing(false);\n                setIsBoundViaContractTxnId(null);\n                setStepBindViaRelayProcessing(false);\n\n                return;\n            }\n\n            await registration.resetBoundUUID();\n            await initIsBoundViaContract();\n\n            const errorMessage = registration.getBindErrorMessage(e);\n            setStepBindViaRelayError(errorMessage);\n            setStepBindViaRelayStatus(\"\");\n            setStepBindViaRelayProcessing(false);\n            setAllowBindRetry(false);\n        }\n    }\n\n    async function mintViaRelay() {\n        try {\n            setStepMintViaRelayProcessing(true);\n\n            setStepMintViaRelayStatus(\n                \"We're minting your NFT.  This could take a minute or two. Please wait.\"\n            );\n\n            const response = await registration.mintViaRelay();\n\n            if (response.ok === false) {\n                const body = await response.json();\n\n                // console.log(body);\n                // console.log(body.error);\n                // console.log(body.error.message);\n\n                throw new Error(body.error.message);\n            }\n\n            await initIsMintedViaContract();\n\n            setStepMintViaRelayError(\"\");\n            setStepMintViaRelayStatus(\"\");\n            setStepMintViaRelayProcessing(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            await initIsMintedViaContract();\n\n            const errorMessage = registration.getMintErrorMessage(e);\n            setStepMintViaRelayError(errorMessage);\n            setStepMintViaRelayStatus(\"\");\n            setStepMintViaRelayProcessing(false);\n\n            if (registration.getIsUUIDUnboundError(e)) {\n                setAllowBindRetry(true);\n            }\n        }\n    }\n\n    /* Step State Checks */\n    /* ---------------------------------------------------------------------- */\n\n    function restoreMode() {\n        if (sessionStorage.getItem(`${statePrefix}-mode`) !== null) {\n            const mode = sessionStorage.getItem(`${statePrefix}-mode`);\n\n            setMode(mode);\n        }\n    }\n\n    function changeMode(mode) {\n        sessionStorage.setItem(`${statePrefix}-mode`, mode);\n\n        setMode(mode);\n    }\n\n    function setModeGas() {\n        changeMode(\"gas\");\n    }\n\n    function setModeGasless() {\n        changeMode(\"gasless\");\n    }\n\n    function hasRelay() {\n        return mode === \"gasless\";\n    }\n\n    function hasConnectedWallet() {\n        return walletAddress !== \"\";\n    }\n\n    function hasUUIDLinked() {\n        return isUUIDLinked === true;\n    }\n\n    function hasBoundViaContract() {\n        return isBoundViaContract === true;\n    }\n\n    function hasMintedViaContract() {\n        return isMintedViaContract === true;\n    }\n\n    function hasSwitchedToMintNetwork() {\n        return chainId === Number(mintChainId);\n    }\n\n    function hasObtainedGasTokens() {\n        return gasBalance > 0;\n    }\n\n    function hasModeSelection() {\n        return stepConnectWalletComplete() && allowMode;\n    }\n\n    function hasModeSelected() {\n        return stepConnectWalletComplete() && mode !== \"\";\n    }\n\n    function hasReachedMaxSupply() {\n        return Number(remainingSupply) <= 0;\n    }\n\n    /* Step Completion Flags */\n    /* ---------------------------------------------------------------------- */\n\n    function getStepCompleteString(status) {\n        return status === true ? \"complete\" : \"incomplete\";\n    }\n\n    function stepConnectWalletComplete() {\n        return hasConnectedWallet();\n    }\n\n    function stepSwitchToMintNetworkComplete() {\n        return hasSwitchedToMintNetwork();\n    }\n\n    function stepObtainGasTokensComplete() {\n        return hasObtainedGasTokens();\n    }\n\n    function stepUUIDLinkedComplete() {\n        return hasUUIDLinked();\n    }\n\n    function stepBindViaRelayComplete() {\n        return hasBoundViaContract();\n    }\n\n    function stepMintViaRelayComplete() {\n        return hasMintedViaContract();\n    }\n\n    /* Step Active Flags */\n    /* ---------------------------------------------------------------------- */\n\n    function getStepActiveString(status) {\n        return status === true ? \"active\" : \"inactive\";\n    }\n\n    function stepConnectWalletActive() {\n        return true;\n    }\n\n    function stepSwitchToMintNetworkActive() {\n        return stepConnectWalletActive();\n    }\n\n    function stepObtainGasTokensActive() {\n        return (\n            stepSwitchToMintNetworkComplete() && stepSwitchToMintNetworkActive()\n        );\n    }\n\n    function stepBindViaRelayActive() {\n        return (\n            (hasRelay() &&\n                stepConnectWalletComplete() &&\n                stepConnectWalletActive()) ||\n            (!hasRelay() &&\n                stepObtainGasTokensComplete() &&\n                stepObtainGasTokensActive())\n        );\n    }\n\n    function stepUUIDLinkedActive() {\n        return stepBindViaRelayComplete() && stepBindViaRelayActive();\n    }\n\n    function stepMintViaRelayActive() {\n        return stepUUIDLinkedComplete() && stepUUIDLinkedActive();\n    }\n\n    /* Bootstrap */\n    /* ---------------------------------------------------------------------- */\n\n    useEffect(() => {\n        if (firstUpdate.current === false) {\n            return;\n        }\n\n        if (firstUpdate.current) {\n            firstUpdate.current = false;\n        }\n\n        init();\n    });\n\n    /* Template */\n    /* ---------------------------------------------------------------------- */\n\n    return (\n        <div className=\"brightid-nft-mint\">\n            {remainingSupplyChecked && hasReachedMaxSupply() && (\n                <div className=\"brightid-nft-mint-supply brightid-nft-mint-supply--sold-out\">\n                    <section className={`brightid-nft-mint-step`}>\n                        {/* <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Mints Remaining\n                                </h2>\n                            </div>\n                        </div> */}\n                        <div className=\"brightid-nft-mint-step__description brightid-nft-mint-step__description--no-header\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>Mints Remaining:</strong> No more mints\n                                remaining\n                            </p>\n                        </div>\n\n                        <div className=\"brightid-nft-mint-step__description\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                Thanks to everyone who minted, and sorry to\n                                those who were unable to get one.\n                            </p>\n                        </div>\n                    </section>\n                </div>\n            )}\n\n            {remainingSupplyChecked && !hasReachedMaxSupply() && (\n                <div className=\"brightid-nft-mint-supply\">\n                    <section className={`brightid-nft-mint-step`}>\n                        {/* <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Mints Remaining\n                                </h2>\n                            </div>\n                        </div> */}\n                        <div className=\"brightid-nft-mint-step__description brightid-nft-mint-step__description--no-header\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>Mints Remaining:</strong>{\" \"}\n                                {remainingSupply} of {maxSupply}\n                            </p>\n                        </div>\n                    </section>\n                </div>\n            )}\n\n            {((remainingSupplyChecked && !hasReachedMaxSupply()) ||\n                stepConnectWalletComplete()) && (\n                <div>\n                    <section className={`brightid-nft-mint-step`}>\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Install BrightID\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action brightid-nft-mint-step__action--app-store\">\n                                <div>\n                                    <a\n                                        href={appStoreAndroid}\n                                        target=\"_blank\"\n                                        rel=\"noreferrer noopener\"\n                                    >\n                                        <img\n                                            className=\"brightid-nft-mint-step__app-store-image\"\n                                            src={googlePlay}\n                                            alt=\"Get it on Google Play\"\n                                        />\n                                    </a>\n                                </div>\n                                <div>\n                                    <a\n                                        href={appStoreIos}\n                                        target=\"_blank\"\n                                        rel=\"noreferrer noopener\"\n                                    >\n                                        <img\n                                            className=\"brightid-nft-mint-step__app-store-image\"\n                                            src={appStore}\n                                            alt=\"Download on App Store\"\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                The first step is to install the BrightID app on\n                                your mobile device.\n                            </p>\n                        </div>\n                    </section>\n\n                    <section className={`brightid-nft-mint-step`}>\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Verify with BrightID\n                                </h2>\n                            </div>\n                            {/* <div className=\"brightid-nft-mint-step__action\">\n                            <button\n                                className=\"brightid-nft-mint-step__button\"\n                                onClick={() => verifyWithBrightID()}\n                            >\n                                Get Verified\n                            </button>\n                        </div> */}\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                Once you have BrightID installed you need to\n                                become verified in their system by participating\n                                in a \"Connection Party\".\n                            </p>\n                            <p className=\"brightid-nft-mint-step__description-button-container\">\n                                <button\n                                    className=\"brightid-nft-mint-step__button\"\n                                    onClick={() => verifyWithBrightID()}\n                                >\n                                    Find Connection Party\n                                </button>\n                            </p>\n                            <h3 className=\"brightid-nft-mint-step__description-p\">\n                                Support\n                            </h3>\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                More details on becoming verified within the\n                                BrightID system can be found at{\" \"}\n                                <a\n                                    className=\"brightid-nft-mint-step__description-link\"\n                                    href=\"https://brightid.gitbook.io/brightid/getting-verified\"\n                                    target=\"_blank\"\n                                    rel=\"noreferrer\"\n                                >\n                                    How To Verify\n                                </a>\n                                .\n                            </p>\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                They also have a{\" \"}\n                                <a\n                                    className=\"brightid-nft-mint-step__description-link\"\n                                    href=\"https://discord.gg/xzhFEeK\"\n                                    target=\"_blank\"\n                                    rel=\"noreferrer\"\n                                >\n                                    Discord channel\n                                </a>{\" \"}\n                                for support.\n                            </p>\n                            <h3 className=\"brightid-nft-mint-step__description-p\">\n                                After Verification\n                            </h3>\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                After you have verified via a connection party,\n                                it will take up to 10 minutes for you to become\n                                verified in their system. You will know when\n                                you're ready to continue through the rest of\n                                steps in this process when you see \"BrightID\n                                meet\" checked off in your list of achievements.\n                                See the screenshots below for where to look in\n                                the app.\n                            </p>\n\n                            <p className=\"brightid-nft-mint-step__description-p brightid-nft-mint-step__description-p--2col-img\">\n                                <img\n                                    className=\"brightid-nft-mint-step__app-store-image\"\n                                    src={openAchievementsSS}\n                                    alt=\"Open Achievements\"\n                                />\n                                <img\n                                    className=\"brightid-nft-mint-step__app-store-image\"\n                                    src={isVerifiedSS}\n                                    alt=\"Check Is Verified\"\n                                />\n                            </p>\n                        </div>\n                    </section>\n\n                    <section\n                        className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--connect\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepConnectWalletComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepConnectWalletActive()\n                        )}\n                    `}\n                    >\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__status\">\n                                <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Connect Wallet\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action\">\n                                <button\n                                    className=\"brightid-nft-mint-step__button\"\n                                    onClick={() => chooseWallet()}\n                                >\n                                    Connect\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            {ensName && (\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>ENS: </strong>\n                                    <span className=\"brightid-nft-mint-step__description-ens-address\">\n                                        {ensName}\n                                    </span>\n                                </p>\n                            )}\n                            {walletAddress && (\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Address: </strong>\n                                    <span className=\"brightid-nft-mint-step__description-wallet-address\">\n                                        {walletAddress}\n                                    </span>\n                                </p>\n                            )}\n                            {!walletAddress && (\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Address: </strong>\n                                    <span>Not Connected</span>\n                                </p>\n                            )}\n                        </div>\n                        <div className=\"brightid-nft-mint-step__feedback\">\n                            {stepConnectWalletError && (\n                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                    {stepConnectWalletError}\n                                </div>\n                            )}\n                        </div>\n                    </section>\n\n                    {hasModeSelection() && (\n                        <section className={`brightid-nft-mint-step`}>\n                            <div className=\"brightid-nft-mint-step__main\">\n                                <div className=\"brightid-nft-mint-step__header\">\n                                    <h2 className=\"brightid-nft-mint-step__heading\">\n                                        Select the type of experience.\n                                    </h2>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__action\">\n                                    <button\n                                        className=\"brightid-nft-mint-step__button\"\n                                        onClick={() => setModeGas()}\n                                    >\n                                        Gas\n                                    </button>\n                                    <button\n                                        className=\"brightid-nft-mint-step__button\"\n                                        onClick={() => setModeGasless()}\n                                    >\n                                        Gasless\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__description\">\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>gas:</strong> you'll execute\n                                    transactions on Gnosis Chain using xDAI for\n                                    gas.\n                                </p>\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>gasless:</strong> We'll cover the\n                                    gas fees for you, but you may experience\n                                    rate limits.\n                                </p>\n                            </div>\n                            {mode && (\n                                <div className=\"brightid-nft-mint-step__description\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        <strong>\n                                            Current Mode:{\" \"}\n                                            <span className=\"brightid-nft-mint-step__important\">\n                                                {mode}\n                                            </span>\n                                        </strong>\n                                    </p>\n                                </div>\n                            )}\n                        </section>\n                    )}\n\n                    {hasModeSelected() && !hasRelay() && (\n                        <section\n                            className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepSwitchToMintNetworkComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepSwitchToMintNetworkActive()\n                        )}\n                    `}\n                        >\n                            <div className=\"brightid-nft-mint-step__main\">\n                                <div className=\"brightid-nft-mint-step__status\">\n                                    <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__header\">\n                                    <h2 className=\"brightid-nft-mint-step__heading\">\n                                        Switch Wallet to {mintChainName}\n                                    </h2>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__action\">\n                                    {canAutoSwitchNetworks && (\n                                        <button\n                                            className=\"brightid-nft-mint-step__button\"\n                                            onClick={() =>\n                                                switchToMintNetwork()\n                                            }\n                                        >\n                                            Switch\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                            {stepConnectWalletComplete() &&\n                                !canAutoSwitchNetworks && (\n                                    <div\n                                        className=\"\n                                brightid-nft-mint-step__description\n                                brightid-nft-mint-step__description--action\n                                brightid-nft-mint-step__description--action-hide-on-complete\n                            \"\n                                    >\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            In your wallet app create a new\n                                            network with the following data and\n                                            switch to that network.\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>Network Name: </strong>\n                                            {mintChainName}\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>RPC URL: </strong>\n                                            {mintRpcUrl}\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>Chain ID: </strong>\n                                            {mintChainId}\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>Currency Symbol: </strong>\n                                            {mintTokenName}\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>\n                                                Block Explorer URL:{\" \"}\n                                            </strong>\n                                            {mintBlockExplorerUrl}\n                                        </p>\n                                    </div>\n                                )}\n                            <div className=\"brightid-nft-mint-step__feedback\">\n                                {stepSwitchToMintNetworkError && (\n                                    <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                        {stepSwitchToMintNetworkError}\n                                    </div>\n                                )}\n                            </div>\n                        </section>\n                    )}\n\n                    {hasModeSelected() && !hasRelay() && (\n                        <section\n                            className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepObtainGasTokensComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepObtainGasTokensActive()\n                        )}\n                    `}\n                        >\n                            <div className=\"brightid-nft-mint-step__main\">\n                                <div className=\"brightid-nft-mint-step__status\">\n                                    <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__header\">\n                                    <h2 className=\"brightid-nft-mint-step__heading\">\n                                        Obtain {mintTokenName} Gas Tokens\n                                    </h2>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__action\">\n                                    {stepSwitchToMintNetworkComplete() && (\n                                        <button\n                                            className=\"brightid-nft-mint-step__button\"\n                                            onClick={() => faucetClaim()}\n                                        >\n                                            Obtain\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__description\">\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Balance: </strong>\n                                    <span className=\"brightid-nft-mint-step__description-balance\">\n                                        {gasBalance} {mintTokenName}\n                                    </span>\n                                </p>\n                            </div>\n                        </section>\n                    )}\n\n                    {hasModeSelected() && (\n                        <section\n                            className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepBindViaRelayComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepBindViaRelayActive()\n                        )}\n                    `}\n                        >\n                            <div className=\"brightid-nft-mint-step__main\">\n                                <div className=\"brightid-nft-mint-step__status\">\n                                    <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__header\">\n                                    <h2 className=\"brightid-nft-mint-step__heading\">\n                                        Bind UUID\n                                    </h2>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__action\">\n                                    {!hasReachedMaxSupply() &&\n                                        hasRelay() &&\n                                        stepConnectWalletComplete() && (\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() =>\n                                                    bindViaRelay(false)\n                                                }\n                                                disabled={\n                                                    stepBindViaRelayProcessing\n                                                        ? true\n                                                        : null\n                                                }\n                                            >\n                                                Bind\n                                            </button>\n                                        )}\n                                    {!hasReachedMaxSupply() &&\n                                        !hasRelay() &&\n                                        stepConnectWalletComplete() && (\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() =>\n                                                    bindViaTransaction(false)\n                                                }\n                                                disabled={\n                                                    stepBindViaRelayProcessing\n                                                        ? true\n                                                        : null\n                                                }\n                                            >\n                                                Bind\n                                            </button>\n                                        )}\n                                    {hasReachedMaxSupply() && <em>Sold Out</em>}\n                                </div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__description\">\n                                {hasRelay() && (\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        In this step you will be asked to sign a\n                                        hash of the UUID below with your wallet.\n                                        This will bind the UUID to you.\n                                    </p>\n                                )}\n                                {!hasRelay() && (\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        In this step you will be presented with\n                                        two prompts by your wallet. The first\n                                        will ask you to sign a hash of the UUID\n                                        below. The second will ask you to\n                                        process the bind transaction. You must\n                                        complete both. This will bind the UUID\n                                        to you.\n                                    </p>\n                                )}\n                                {uuidHex && (\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        <strong>UUID: </strong>\n                                        <span className=\"brightid-nft-mint-step__description-wallet-address\">\n                                            {uuidHex}\n                                        </span>\n\n                                        {/* <span className=\"brightid-nft-mint-step__description-reset\">\n                                    If you have issues with this UUID you can\n                                    reset it.\n                                </span>\n                                <button\n                                    className=\"brightid-nft-mint-step__button brightid-nft-mint-step__button--small\"\n                                    onClick={() => resetUUID()}\n                                >\n                                    Reset\n                                </button> */}\n                                    </p>\n                                )}\n                            </div>\n                            <div className=\"brightid-nft-mint-step__feedback\">\n                                {stepBindViaRelayStatus && (\n                                    <div className=\"brightid-nft-mint-step__response\">\n                                        <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                            <div className=\"brightid-nft-mint-step__loading-icon\">\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                            </div>\n                                        </div>\n                                        <div className=\"brightid-nft-mint-step__response-message\">\n                                            <div>{stepBindViaRelayStatus}</div>\n                                        </div>\n                                    </div>\n                                )}\n                                {stepBindViaRelayError && (\n                                    <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                        {stepBindViaRelayError}\n                                    </div>\n                                )}\n                                {isBoundViaContractTxnProcessing && (\n                                    <div className=\"brightid-nft-mint-step__response\">\n                                        <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                            <div className=\"brightid-nft-mint-step__loading-icon\">\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                            </div>\n                                        </div>\n                                        <div className=\"brightid-nft-mint-step__response-message\">\n                                            <div>\n                                                Transaction is being\n                                                processed...\n                                            </div>\n                                            <div>\n                                                <a\n                                                    className=\"brightid-nft-mint-step__response-link\"\n                                                    href={`${mintBlockExplorerUrl}${mintBlockExplorerTxnPath}${isBoundViaContractTxnId}`}\n                                                    target=\"_blank\"\n                                                    rel=\"noreferrer\"\n                                                >\n                                                    View Transaction\n                                                </a>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                                {stepBoundViaContractError && (\n                                    <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                        {stepBoundViaContractError}\n                                    </div>\n                                )}\n                                {stepBindViaRelayComplete() && (\n                                    <div className=\"brightid-nft-mint-step__description\">\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>\n                                                Your UUID has been bound.\n                                            </strong>\n                                        </p>\n                                    </div>\n                                )}\n                            </div>\n                        </section>\n                    )}\n\n                    {hasModeSelected() && (\n                        <section\n                            className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--brightid-link\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepUUIDLinkedComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepUUIDLinkedActive()\n                        )}\n                    `}\n                        >\n                            <div className=\"brightid-nft-mint-step__main\">\n                                <div className=\"brightid-nft-mint-step__status\">\n                                    <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__header\">\n                                    <h2 className=\"brightid-nft-mint-step__heading\">\n                                        Link UUID to BrightID\n                                    </h2>\n                                </div>\n                                {/* <div className=\"brightid-nft-mint-step__action\">\n                            <button\n                                className=\"brightid-nft-mint-step__button\"\n                                onClick={() => linkUUIDToBrightID()}\n                            >\n                                Link Address\n                            </button>\n                        </div> */}\n                            </div>\n                            {stepBindViaRelayComplete() && qrCodeUUIDUrl && (\n                                <div\n                                    className=\"\n                            brightid-nft-mint-step__description\n                            brightid-nft-mint-step__description--action\n                        \"\n                                >\n                                    <div className=\"brightid-nft-mint-step--mobile\">\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            If you're on your mobile device just\n                                            use this button to open BrightID and\n                                            link your wallet.\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-button-container\">\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() =>\n                                                    linkUUIDToBrightID()\n                                                }\n                                            >\n                                                Link Address\n                                            </button>\n                                        </p>\n                                        <div className=\"brightid-nft-mint-step__feedback\">\n                                            {linkUUIDToBrightIDError && (\n                                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                                    {linkUUIDToBrightIDError}\n                                                </div>\n                                            )}\n                                        </div>\n                                        <p className=\"brightid-nft-mint-step--mobile\">\n                                            <br />\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            If BrightID is installed on another\n                                            device scan the QR code below with\n                                            the \"Scan a Code\" button in the\n                                            BrightID mobile app.\n                                        </p>\n                                    </div>\n                                    <div className=\"brightid-nft-mint-step--desktop\">\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            Use the \"Scan a Code\" button in the\n                                            BrightID app to scan the QR code\n                                            below.\n                                        </p>\n                                    </div>\n                                    {/* <p className=\"brightid-nft-mint-step__description-qrcode-container\">\n                                {qrCodeUUIDUrl}\n                            </p> */}\n                                    <p className=\"brightid-nft-mint-step__description-qrcode-container\">\n                                        <QRCode\n                                            renderAs=\"svg\"\n                                            size={200}\n                                            value={qrCodeUUIDUrl}\n                                        />\n                                    </p>\n                                    <div className=\"brightid-nft-mint-step--desktop\">\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            After linking, you'll get a\n                                            confirmation in the BrightID app.\n                                            Then just wait about 20-30 seconds\n                                            and this website will update to\n                                            allow continuing to the next step.\n                                        </p>\n                                    </div>\n                                </div>\n                            )}\n                            <div className=\"brightid-nft-mint-step__feedback\"></div>\n                        </section>\n                    )}\n\n                    {hasModeSelected() && (\n                        <section\n                            className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepMintViaRelayComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepMintViaRelayComplete() ||\n                                stepMintViaRelayActive()\n                        )}\n                    `}\n                        >\n                            <div className=\"brightid-nft-mint-step__main\">\n                                <div className=\"brightid-nft-mint-step__status\">\n                                    <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__header\">\n                                    <h2 className=\"brightid-nft-mint-step__heading\">\n                                        Mint NFT\n                                    </h2>\n                                </div>\n                                <div className=\"brightid-nft-mint-step__action\">\n                                    {!hasReachedMaxSupply() &&\n                                        hasRelay() &&\n                                        stepConnectWalletComplete() &&\n                                        stepBindViaRelayComplete() &&\n                                        stepUUIDLinkedComplete() && (\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() => mintViaRelay()}\n                                                disabled={\n                                                    stepMintViaRelayProcessing ||\n                                                    allowBindRetry\n                                                        ? true\n                                                        : null\n                                                }\n                                            >\n                                                Mint\n                                            </button>\n                                        )}\n                                    {!hasReachedMaxSupply() &&\n                                        !hasRelay() &&\n                                        stepConnectWalletComplete() &&\n                                        stepBindViaRelayComplete() &&\n                                        stepUUIDLinkedComplete() && (\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() =>\n                                                    mintViaTransaction()\n                                                }\n                                                disabled={\n                                                    stepMintViaRelayProcessing ||\n                                                    allowBindRetry\n                                                        ? true\n                                                        : null\n                                                }\n                                            >\n                                                Mint\n                                            </button>\n                                        )}\n                                    {hasReachedMaxSupply() && <em>Sold Out</em>}\n                                </div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__feedback\">\n                                {stepMintViaRelayStatus && (\n                                    <div className=\"brightid-nft-mint-step__response\">\n                                        <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                            <div className=\"brightid-nft-mint-step__loading-icon\">\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                            </div>\n                                        </div>\n                                        <div className=\"brightid-nft-mint-step__response-message\">\n                                            <div>{stepMintViaRelayStatus}</div>\n                                        </div>\n                                    </div>\n                                )}\n                                {stepMintViaRelayError && (\n                                    <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                        {stepMintViaRelayError}\n                                    </div>\n                                )}\n                                {isMintedViaContractTxnProcessing && (\n                                    <div className=\"brightid-nft-mint-step__response\">\n                                        <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                            <div className=\"brightid-nft-mint-step__loading-icon\">\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                                <div></div>\n                                            </div>\n                                        </div>\n                                        <div className=\"brightid-nft-mint-step__response-message\">\n                                            <div>\n                                                Transaction is being\n                                                processed...\n                                            </div>\n                                            <div>\n                                                <a\n                                                    className=\"brightid-nft-mint-step__response-link\"\n                                                    href={`${mintBlockExplorerUrl}${mintBlockExplorerTxnPath}${isMintedViaContractTxnId}`}\n                                                    target=\"_blank\"\n                                                    rel=\"noreferrer\"\n                                                >\n                                                    View Transaction\n                                                </a>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                                {stepMintedViaContractError && (\n                                    <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                        {stepMintedViaContractError}\n                                    </div>\n                                )}\n                                {allowBindRetry && (\n                                    <div className=\"brightid-nft-mint-step__description\">\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>\n                                                Sorry it looks like your UUID\n                                                failed to bind properly. Please\n                                                use this retry button to rebind\n                                                it and then try minting again.\n                                            </strong>\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            {!hasReachedMaxSupply() &&\n                                                hasRelay() &&\n                                                stepConnectWalletComplete() && (\n                                                    <button\n                                                        className=\"brightid-nft-mint-step__button\"\n                                                        onClick={() =>\n                                                            bindViaRelay(true)\n                                                        }\n                                                        disabled={\n                                                            stepBindViaRelayProcessing\n                                                                ? true\n                                                                : null\n                                                        }\n                                                    >\n                                                        Retry Bind\n                                                    </button>\n                                                )}\n                                            {!hasReachedMaxSupply() &&\n                                                !hasRelay() &&\n                                                stepConnectWalletComplete() && (\n                                                    <button\n                                                        className=\"brightid-nft-mint-step__button\"\n                                                        onClick={() =>\n                                                            bindViaTransaction(\n                                                                true\n                                                            )\n                                                        }\n                                                        disabled={\n                                                            stepBindViaRelayProcessing\n                                                                ? true\n                                                                : null\n                                                        }\n                                                    >\n                                                        Retry Bind\n                                                    </button>\n                                                )}\n                                            {hasReachedMaxSupply() && (\n                                                <em>Sold Out</em>\n                                            )}\n                                        </p>\n                                    </div>\n                                )}\n                                {stepMintViaRelayComplete() && (\n                                    <div className=\"brightid-nft-mint-step__description\">\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            <strong>\n                                                Your NFT has been minted.\n                                            </strong>\n                                        </p>\n                                        <p className=\"brightid-nft-mint-step__description-p\">\n                                            {walletAddress && (\n                                                <a\n                                                    className=\"brightid-nft-mint-step__description-link\"\n                                                    href={`https://epor.io/${walletAddress}`}\n                                                    rel=\"noreferrer\"\n                                                >\n                                                    View Your NFT Here\n                                                </a>\n                                            )}\n                                        </p>\n\n                                        {!hasRelay() &&\n                                            hasSwitchedToMintNetwork() && (\n                                                <p className=\"brightid-nft-mint-step__description-p\">\n                                                    Before you leave you can use\n                                                    the button below to switch\n                                                    your wallet back to the\n                                                    Ethereum mainnet.\n                                                </p>\n                                            )}\n                                        {!hasRelay() &&\n                                            hasSwitchedToMintNetwork() &&\n                                            canAutoSwitchNetworks && (\n                                                <p className=\"brightid-nft-mint-step__description-p\">\n                                                    <button\n                                                        className=\"brightid-nft-mint-step__button\"\n                                                        onClick={() =>\n                                                            switchToMainnetNetwork()\n                                                        }\n                                                    >\n                                                        Switch back to Mainnet\n                                                    </button>\n                                                </p>\n                                            )}\n                                    </div>\n                                )}\n                            </div>\n                        </section>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default BrightIDNftMint;\n","import \"./BrightIDNftMint.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport QRCode from \"qrcode.react\";\nimport BrightIDNftMintModel from \"./BrightIDNftMintModel\";\nimport DeepLinker from \"./DeepLinker\";\n\nlet registration;\n\nlet changePollingInterval = 0;\n\nfunction BrightIDNftRescue({\n    context = \"\",\n    contractAddr = \"\",\n    mainnetRpcUrl = \"\",\n    walletConnectInfuraId = \"\",\n    relayBindURL = \"\",\n    relayMintURL = \"\",\n    maxSupply = 0,\n    appStoreAndroid = \"https://play.google.com/store/apps/details?id=org.brightid\",\n    appStoreIos = \"https://apps.apple.com/us/app/brightid/id1428946820\",\n    brightIdMeetUrl = \"https://meet.brightid.org\",\n    deepLinkPrefix = \"brightid://link-verification/http:%2f%2fnode.brightid.org\",\n    mintTokenFaucetUrl = \"https://www.gimlu.com/faucet\",\n    mintChainId = 100,\n    mintChainName = \"Gnosis Chain (formerly xDai)\",\n    mintTokenName = \"xDAI\",\n    mintTokenDecimal = 18,\n    mintBlockExplorerUrl = \"https://blockscout.com/xdai/mainnet\",\n    mintBlockExplorerTxnPath = \"/tx/\",\n    mintRpcUrl = \"https://rpc.gnosischain.com\",\n    verificationUrl = \"https://app.brightid.org/node/v5/verifications\",\n}) {\n    /* State */\n    /* ---------------------------------------------------------------------- */\n\n    const statePrefix = \"brightid-nft-rescue\";\n\n    const firstUpdate = useRef(true);\n\n    const [allowBindRetry, setAllowBindRetry] = useState(false);\n\n    const [allowMode, setAllowMode] = useState(false);\n\n    const [mode, setMode] = useState(\"\");\n\n    const [uuidHex, setUUIDHex] = useState(\"\");\n\n    const [walletAddress, setWalletAddress] = useState(\"\");\n\n    const [ensName, setENSName] = useState(\"\");\n\n    const [chainId, setChainId] = useState(\"\");\n\n    const [gasBalance, setGasBalance] = useState(0.0);\n\n    const [canAutoSwitchNetworks, setCanAutoSwitchNetworks] = useState(false);\n\n    const [qrCodeUUIDUrl, setQrCodeUUIDUrl] = useState(\"\");\n\n    const [isUUIDLinked, setIsUUIDLinked] = useState(false);\n\n    const [isBoundViaContract, setIsBoundViaContract] = useState(false);\n\n    const [isMintedViaContract, setIsMintedViaContract] = useState(false);\n\n    const [stepConnectWalletError, setStepConnectWalletError] = useState(\"\");\n\n    const [stepBindViaRelayStatus, setStepBindViaRelayStatus] = useState(\"\");\n\n    const [stepBindViaRelayError, setStepBindViaRelayError] = useState(\"\");\n\n    const [stepRescueViaRelayStatus, setStepRescueViaRelayStatus] =\n        useState(\"\");\n\n    const [stepRescueViaRelayError, setStepRescueViaRelayError] = useState(\"\");\n\n    const [linkUUIDToBrightIDError, setLinkUUIDToBrightIDError] = useState(\"\");\n\n    const [stepSwitchToMintNetworkError, setStepSwitchToMintNetworkError] =\n        useState(\"\");\n\n    const [stepBoundViaContractError, setStepBoundViaContractError] =\n        useState(\"\");\n\n    const [\n        isBoundViaContractTxnProcessing,\n        setIsBoundViaContractTxnProcessing,\n    ] = useState(false);\n\n    const [isBoundViaContractTxnId, setIsBoundViaContractTxnId] =\n        useState(null);\n\n    const [stepMintedViaContractError, setStepMintedViaContractError] =\n        useState(\"\");\n\n    const [\n        isMintedViaContractTxnProcessing,\n        setIsMintedViaContractTxnProcessing,\n    ] = useState(false);\n\n    const [isMintedViaContractTxnId, setIsMintedViaContractTxnId] =\n        useState(null);\n\n    const [stepBindViaRelayProcessing, setStepBindViaRelayProcessing] =\n        useState(\"\");\n\n    const [stepRescueViaRelayProcessing, setStepRescueViaRelayProcessing] =\n        useState(\"\");\n\n    const [rescueAddress, setRescueAddress] = useState(\"\");\n\n    const [alreadyHoldsToken, setAlreadyHoldsToken] = useState(false);\n\n    /* Web3 Data Init & Monitoring */\n    /* ---------------------------------------------------------------------- */\n\n    async function onAccountDisconnect() {\n        resetWalletData();\n        setMode(\"\");\n        setAllowMode(false);\n        setUUIDHex(\"\");\n        setWalletAddress(\"\");\n        setENSName(\"\");\n        setChainId(\"\");\n        setGasBalance(\"\");\n        setCanAutoSwitchNetworks(\"\");\n        setQrCodeUUIDUrl(\"\");\n        setIsUUIDLinked(\"\");\n        setIsBoundViaContract(false);\n        setIsMintedViaContract(false);\n    }\n\n    async function onAccountChange() {\n        resetWalletData();\n        initAllowMode();\n        await checkIfAlreadyHoldsNFT();\n        await registration.initUUID();\n        initUUIDHex();\n        initWalletAddress();\n        initENSName();\n        initChainId();\n        initGasBalance();\n        initCanAutoSwitchNetworks();\n        initQrCodeUUIDUrl();\n        initIsUUIDLinked();\n        initIsBoundViaContract();\n        initIsMintedViaContract();\n    }\n\n    function onChainChanged() {\n        initChainId();\n    }\n\n    function onChangePolling() {\n        if (registration.gasBalance === 0 || registration.gasBalance === 0.0) {\n            initGasBalance();\n        }\n\n        if (registration.isBoundViaContract === false) {\n            initIsBoundViaContract();\n        }\n\n        if (\n            registration.isBoundViaContract === true &&\n            registration.isUUIDLinked === false\n        ) {\n            initIsUUIDLinked();\n        }\n\n        if (registration.isMintedViaContract === false) {\n            initIsMintedViaContract();\n        }\n    }\n\n    function removeEvents() {\n        console.log(\"remove events\");\n\n        if (typeof registration.web3Instance === \"object\") {\n            registration.web3Instance.removeListener(\n                \"accountsChanged\",\n                onAccountChange\n            );\n\n            registration.web3Instance.removeListener(\n                \"chainChanged\",\n                onChainChanged\n            );\n        }\n\n        if (changePollingInterval) {\n            clearInterval(changePollingInterval);\n        }\n    }\n\n    function addEvents() {\n        console.log(\"add events\");\n\n        if (typeof registration.web3Instance === \"object\") {\n            registration.web3Instance.on(\"accountsChanged\", onAccountChange);\n\n            registration.web3Instance.on(\"chainChanged\", onChainChanged);\n        }\n\n        changePollingInterval = setInterval(onChangePolling, 5000);\n    }\n\n    /* State Data Query */\n    /* ---------------------------------------------------------------------- */\n\n    // async function resetUUID() {\n    //     try {\n    //         console.log(\"reset\");\n    //         await registration.resetUUID();\n\n    //         setUUIDHex(registration.uuidHex);\n\n    //         await initIsBoundViaContract();\n\n    //         initIsUUIDLinked();\n    //     } catch (e) {\n    //         // console.error(e);\n    //         // console.log(e);\n    //     }\n    // }\n\n    async function checkIfAlreadyHoldsNFT() {\n        const tokenBalance = await registration.queryTokenBalance();\n\n        const holdsToken = tokenBalance > 0;\n\n        setAlreadyHoldsToken(holdsToken);\n    }\n\n    async function resetWalletData() {\n        try {\n            await registration.resetWalletData();\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initWalletAddress() {\n        try {\n            const walletAddress = await registration.initWalletAddress();\n\n            setWalletAddress(walletAddress);\n            setStepConnectWalletError(\"\");\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initUUIDHex() {\n        try {\n            setUUIDHex(registration.uuidHex);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initENSName() {\n        try {\n            const ensName = await registration.initENSName();\n\n            setENSName(ensName);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initChainId() {\n        try {\n            const chainId = await registration.initChainId();\n\n            setChainId(chainId);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initGasBalance() {\n        try {\n            const gasBalance = await registration.initGasBalance();\n\n            setGasBalance(gasBalance);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initCanAutoSwitchNetworks() {\n        try {\n            const canAutoSwitchNetworks =\n                await registration.canAutoSwitchNetworks();\n\n            setCanAutoSwitchNetworks(canAutoSwitchNetworks);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initQrCodeUUIDUrl() {\n        try {\n            const qrCodeUUIDUrl = await registration.getQrCodeUUIDUrl();\n\n            setQrCodeUUIDUrl(qrCodeUUIDUrl);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initIsUUIDLinked() {\n        try {\n            const isUUIDLinked = await registration.initIsUUIDLinked();\n\n            setIsUUIDLinked(isUUIDLinked);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initIsBoundViaContract() {\n        try {\n            const isBoundViaContract =\n                await registration.initIsBoundViaContract();\n\n            // console.log(isBoundViaContract);\n\n            setIsBoundViaContract(isBoundViaContract);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async function initIsMintedViaContract() {\n        try {\n            const isMintedViaContract =\n                await registration.initIsMintedViaContract();\n\n            // console.log(isMintedViaContract);\n\n            setIsMintedViaContract(isMintedViaContract);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    /* Interactive Events */\n    /* ---------------------------------------------------------------------- */\n\n    function linkUUIDToBrightID() {\n        // window.open(qrCodeUUIDUrl);\n\n        var url = qrCodeUUIDUrl;\n\n        if (url === \"\") {\n            return;\n        }\n\n        var linker = new DeepLinker({\n            onIgnored: function () {\n                console.log(\"browser failed to respond to the deep link\");\n\n                setLinkUUIDToBrightIDError(\n                    \"Couldn't open BrightID. Scan the QR code below with the device you have BrightID installed on.\"\n                );\n            },\n            onFallback: function () {\n                console.log(\"dialog hidden or user returned to tab\");\n            },\n            onReturn: function () {\n                console.log(\"user returned to the page from the native app\");\n            },\n        });\n\n        linker.openURL(url);\n    }\n\n    async function initRegistration() {\n        if (typeof registration === \"object\") {\n            return;\n        }\n\n        console.log(\"initRegistration\");\n\n        // Initialize registration class.\n        registration = new BrightIDNftMintModel(\n            statePrefix,\n            context,\n            contractAddr,\n            mainnetRpcUrl,\n            walletConnectInfuraId,\n            relayBindURL,\n            relayMintURL,\n            maxSupply,\n            appStoreAndroid,\n            appStoreIos,\n            brightIdMeetUrl,\n            deepLinkPrefix,\n            mintTokenFaucetUrl,\n            mintChainId,\n            mintChainName,\n            mintTokenName,\n            mintTokenDecimal,\n            mintBlockExplorerUrl,\n            mintBlockExplorerTxnPath,\n            mintRpcUrl,\n            verificationUrl\n        );\n    }\n\n    async function init() {\n        await initRegistration();\n\n        // Restore mode\n        // restoreMode(); // TEMP DISABLE GAS CHOICE\n\n        // Reconnect on Load\n        reconnectWallet();\n    }\n\n    async function initAllowMode() {\n        // const gasBalance = await registration.initGasBalance();\n\n        // if (gasBalance) {\n        //     setAllowMode(false);\n        //     setModeGas();\n        // } else {\n        //     setAllowMode(true);\n        // }\n\n        setAllowMode(false); // TEMP DISABLE GAS CHOICE\n        setModeGas(); // TEMP DISABLE GAS CHOICE\n    }\n\n    async function reconnectWallet() {\n        await initRegistration();\n\n        if (registration.hasReconnectableWallet()) {\n            connectWallet();\n        }\n    }\n\n    async function connectWallet() {\n        try {\n            setStepConnectWalletError(\"\");\n            await initRegistration();\n            removeEvents();\n            await registration.connectWallet();\n            addEvents();\n            onAccountChange();\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            onAccountDisconnect();\n\n            if (e.message === \"User Rejected\") {\n                setStepConnectWalletError(\"Unlock your wallet to continue\");\n            } else {\n                setStepConnectWalletError(e.message);\n            }\n        }\n    }\n\n    async function chooseWallet() {\n        try {\n            setStepConnectWalletError(\"\");\n            await initRegistration();\n            removeEvents();\n            await registration.chooseWallet();\n            addEvents();\n            onAccountChange();\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            onAccountDisconnect();\n\n            if (e.message === \"User Rejected\") {\n                setStepConnectWalletError(\"Unlock your wallet to continue\");\n            } else {\n                setStepConnectWalletError(e.message);\n            }\n        }\n    }\n\n    async function handleRescueAddressChange(event) {\n        setRescueAddress(event.target.value);\n    }\n\n    async function getRescueAddress() {\n        return rescueAddress;\n    }\n\n    async function faucetClaim() {\n        window.open(mintTokenFaucetUrl, \"_blank\");\n    }\n\n    async function switchToMintNetwork() {\n        try {\n            await registration.switchToMintNetwork();\n\n            setStepSwitchToMintNetworkError(\"\");\n        } catch (switchError) {\n            // console.log(switchError);\n\n            // This error code indicates that the chain has not been added to MetaMask.\n            if (switchError.code === 4902) {\n                addMintNetwork();\n\n                return;\n            }\n\n            // console.error(switchError);\n            // console.log(switchError);\n\n            setStepSwitchToMintNetworkError(switchError.message);\n        }\n    }\n\n    async function switchToMainnetNetwork() {\n        try {\n            await registration.switchToMainnetNetwork();\n        } catch (switchError) {\n            // console.error(switchError);\n            // console.log(switchError);\n        }\n    }\n\n    async function addMintNetwork() {\n        try {\n            await registration.addMintNetwork();\n\n            setStepSwitchToMintNetworkError(\"\");\n        } catch (addError) {\n            // console.error(addError);\n            // console.log(addError);\n\n            setStepSwitchToMintNetworkError(addError.message);\n        }\n    }\n\n    async function bindViaTransaction(isRetry = false) {\n        try {\n            setStepBindViaRelayProcessing(true);\n\n            const tx = await registration.bindViaTransaction();\n\n            setIsBoundViaContractTxnProcessing(true);\n            setIsBoundViaContractTxnId(tx.hash);\n            setStepBoundViaContractError(\"\");\n\n            // wait for the transaction to be mined\n            const receipt = await tx.wait();\n\n            if (!receipt.blockNumber || Number(receipt.status) !== 1) {\n                throw new Error(\"Transaction failed. Please try again.\");\n            }\n\n            await registration.setBoundUUID();\n            await initIsBoundViaContract();\n\n            setStepBoundViaContractError(\"\");\n            setIsBoundViaContractTxnProcessing(false);\n            setIsBoundViaContractTxnId(null);\n            setStepBindViaRelayProcessing(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            if (\n                isRetry === false &&\n                registration.getIsUUIDAlreadyBoundError(e)\n            ) {\n                await registration.setBoundUUID();\n                await initIsBoundViaContract();\n\n                setStepBoundViaContractError(\"\");\n                setIsBoundViaContractTxnProcessing(false);\n                setIsBoundViaContractTxnId(null);\n                setStepBindViaRelayProcessing(false);\n\n                return;\n            }\n\n            await registration.resetBoundUUID();\n            await initIsBoundViaContract();\n\n            const errorMessage = registration.getBindErrorMessage(e);\n            setStepBoundViaContractError(errorMessage);\n            setIsBoundViaContractTxnProcessing(false);\n            setIsBoundViaContractTxnId(null);\n            setStepBindViaRelayProcessing(false);\n            setAllowBindRetry(false);\n        }\n    }\n\n    async function rescueViaTransaction() {\n        try {\n            setStepRescueViaRelayProcessing(true);\n\n            const rescueFrom = await getRescueAddress();\n\n            if (!rescueFrom) {\n                throw new Error(\n                    \"Please enter a wallet address to rescue from.\"\n                );\n            }\n\n            const tx = await registration.rescueViaTransaction(rescueFrom);\n\n            setIsMintedViaContractTxnProcessing(true);\n            setIsMintedViaContractTxnId(tx.hash);\n            setStepMintedViaContractError(\"\");\n\n            // wait for the transaction to be mined\n            const receipt = await tx.wait();\n\n            if (!receipt.blockNumber || Number(receipt.status) !== 1) {\n                throw new Error(\"Transaction failed. Please try again.\");\n            }\n\n            await initIsMintedViaContract();\n\n            setStepMintedViaContractError(\"\");\n            setIsMintedViaContractTxnProcessing(false);\n            setIsMintedViaContractTxnId(null);\n            setStepRescueViaRelayProcessing(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            await initIsMintedViaContract();\n\n            const errorMessage = registration.getMintErrorMessage(e);\n            setStepMintedViaContractError(errorMessage);\n            setIsMintedViaContractTxnProcessing(false);\n            setIsMintedViaContractTxnId(null);\n            setStepRescueViaRelayProcessing(false);\n\n            if (registration.getIsUUIDUnboundError(e)) {\n                setAllowBindRetry(true);\n            }\n        }\n    }\n\n    async function bindViaRelay(isRetry = false) {\n        try {\n            setStepBindViaRelayProcessing(true);\n\n            setStepBindViaRelayStatus(\n                \"We're binding your UUID.  This could take a minute or two. Please wait.\"\n            );\n\n            const response = await registration.bindViaRelay();\n\n            if (response.ok === false) {\n                const body = await response.json();\n\n                // console.log(body);\n                // console.log(body.error);\n                // console.log(body.error.message);\n\n                throw new Error(body.error.message);\n            }\n\n            await registration.setBoundUUID();\n            await initIsBoundViaContract();\n\n            setStepBindViaRelayError(\"\");\n            setStepBindViaRelayStatus(\"\");\n            setStepBindViaRelayProcessing(false);\n\n            setAllowBindRetry(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            if (\n                isRetry === false &&\n                registration.getIsUUIDAlreadyBoundError(e)\n            ) {\n                await registration.setBoundUUID();\n                await initIsBoundViaContract();\n\n                setStepBoundViaContractError(\"\");\n                setIsBoundViaContractTxnProcessing(false);\n                setIsBoundViaContractTxnId(null);\n                setStepBindViaRelayProcessing(false);\n\n                return;\n            }\n\n            await registration.resetBoundUUID();\n            await initIsBoundViaContract();\n\n            const errorMessage = registration.getBindErrorMessage(e);\n            setStepBindViaRelayError(errorMessage);\n            setStepBindViaRelayStatus(\"\");\n            setStepBindViaRelayProcessing(false);\n            setAllowBindRetry(false);\n        }\n    }\n\n    async function rescueViaRelay() {\n        try {\n            setStepRescueViaRelayProcessing(true);\n\n            setStepRescueViaRelayStatus(\n                \"We're rescuing your NFT.  This could take a minute or two. Please wait.\"\n            );\n\n            const rescueFrom = await getRescueAddress();\n\n            if (!rescueFrom) {\n                throw new Error(\n                    \"Please enter a wallet address to rescue from.\"\n                );\n            }\n\n            const response = await registration.rescueViaRelay(rescueFrom);\n\n            if (response.ok === false) {\n                const body = await response.json();\n\n                // console.log(body);\n                // console.log(body.error);\n                // console.log(body.error.message);\n\n                throw new Error(body.error.message);\n            }\n\n            await initIsMintedViaContract();\n\n            setStepRescueViaRelayError(\"\");\n            setStepRescueViaRelayStatus(\"\");\n            setStepRescueViaRelayProcessing(false);\n        } catch (e) {\n            console.error(e);\n            // console.log(e);\n\n            await initIsMintedViaContract();\n\n            const errorMessage = registration.getMintErrorMessage(e);\n            setStepRescueViaRelayError(errorMessage);\n            setStepRescueViaRelayStatus(\"\");\n            setStepRescueViaRelayProcessing(false);\n\n            if (registration.getIsUUIDUnboundError(e)) {\n                setAllowBindRetry(true);\n            }\n        }\n    }\n\n    /* Step State Checks */\n    /* ---------------------------------------------------------------------- */\n\n    function restoreMode() {\n        if (sessionStorage.getItem(`${statePrefix}-mode`) !== null) {\n            const mode = sessionStorage.getItem(`${statePrefix}-mode`);\n\n            setMode(mode);\n        }\n    }\n\n    function changeMode(mode) {\n        sessionStorage.setItem(`${statePrefix}-mode`, mode);\n\n        setMode(mode);\n    }\n\n    function setModeGas() {\n        changeMode(\"gas\");\n    }\n\n    function setModeGasless() {\n        changeMode(\"gasless\");\n    }\n\n    function hasRelay() {\n        return mode === \"gasless\";\n    }\n\n    function hasConnectedWallet() {\n        return walletAddress !== \"\";\n    }\n\n    function hasUUIDLinked() {\n        return isUUIDLinked === true;\n    }\n\n    function hasBoundViaContract() {\n        return isBoundViaContract === true;\n    }\n\n    function hasMintedViaContract() {\n        return isMintedViaContract === true;\n    }\n\n    function hasSwitchedToMintNetwork() {\n        return chainId === Number(mintChainId);\n    }\n\n    function hasObtainedGasTokens() {\n        return gasBalance > 0;\n    }\n\n    function hasModeSelection() {\n        return stepConnectWalletComplete() && allowMode;\n    }\n\n    function hasModeSelected() {\n        return stepConnectWalletComplete() && mode !== \"\";\n    }\n\n    /* Step Completion Flags */\n    /* ---------------------------------------------------------------------- */\n\n    function getStepCompleteString(status) {\n        return status === true ? \"complete\" : \"incomplete\";\n    }\n\n    function stepConnectWalletComplete() {\n        return hasConnectedWallet();\n    }\n\n    function stepSwitchToMintNetworkComplete() {\n        return hasSwitchedToMintNetwork();\n    }\n\n    function stepObtainGasTokensComplete() {\n        return hasObtainedGasTokens();\n    }\n\n    function stepUUIDLinkedComplete() {\n        return hasUUIDLinked();\n    }\n\n    function stepBindViaRelayComplete() {\n        return hasBoundViaContract();\n    }\n\n    function stepRescueViaRelayComplete() {\n        return hasMintedViaContract();\n    }\n\n    /* Step Active Flags */\n    /* ---------------------------------------------------------------------- */\n\n    function getStepActiveString(status) {\n        return status === true ? \"active\" : \"inactive\";\n    }\n\n    function stepConnectWalletActive() {\n        return true;\n    }\n\n    function stepSwitchToMintNetworkActive() {\n        return stepConnectWalletActive();\n    }\n\n    function stepObtainGasTokensActive() {\n        return (\n            stepSwitchToMintNetworkComplete() && stepSwitchToMintNetworkActive()\n        );\n    }\n\n    function stepBindViaRelayActive() {\n        return (\n            (hasRelay() &&\n                stepConnectWalletComplete() &&\n                stepConnectWalletActive()) ||\n            (!hasRelay() &&\n                stepObtainGasTokensComplete() &&\n                stepObtainGasTokensActive())\n        );\n    }\n\n    function stepUUIDLinkedActive() {\n        return stepBindViaRelayComplete() && stepBindViaRelayActive();\n    }\n\n    function stepRescueViaRelayActive() {\n        return stepUUIDLinkedComplete() && stepUUIDLinkedActive();\n    }\n\n    /* Bootstrap */\n    /* ---------------------------------------------------------------------- */\n\n    useEffect(() => {\n        if (firstUpdate.current === false) {\n            return;\n        }\n\n        if (firstUpdate.current) {\n            firstUpdate.current = false;\n        }\n\n        init();\n    });\n\n    /* Template */\n    /* ---------------------------------------------------------------------- */\n\n    return (\n        <div className=\"brightid-nft-mint\">\n            <div>\n                <section className={`brightid-nft-mint-step`}>\n                    <div className=\"brightid-nft-mint-step__main\">\n                        <div className=\"brightid-nft-mint-step__header\">\n                            <h2 className=\"brightid-nft-mint-step__heading\">\n                                Rescuing a BrightID Soulbound NFT\n                            </h2>\n                        </div>\n                    </div>\n                    <div className=\"brightid-nft-mint-step__description\">\n                        <p className=\"brightid-nft-mint-step__description-p\">\n                            To rescue your BrightID Soulbound NFT you'll perform\n                            a 'rescue' process that will allow you to transfer\n                            your soulbound NFT from a lost or compromised wallet\n                            to a new wallet of your choice. This is made\n                            possible by using the BrightID verification system\n                            to assure that only the owner of the BrightID\n                            account that minted the NFT can rescue it to a new\n                            wallet.\n                        </p>\n                        <p className=\"brightid-nft-mint-step__description-p\">\n                            To execute the rescue you'll need to perform the\n                            tasks below with the{\" \"}\n                            <strong>\n                                wallet you want to rescue the NFT to\n                            </strong>{\" \"}\n                            (not the lost wallet holding it).\n                        </p>\n                    </div>\n                </section>\n\n                <section\n                    className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--connect\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepConnectWalletComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepConnectWalletActive()\n                        )}\n                    `}\n                >\n                    <div className=\"brightid-nft-mint-step__main\">\n                        <div className=\"brightid-nft-mint-step__status\">\n                            <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__header\">\n                            <h2 className=\"brightid-nft-mint-step__heading\">\n                                Connect Wallet\n                            </h2>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__action\">\n                            <button\n                                className=\"brightid-nft-mint-step__button\"\n                                onClick={() => chooseWallet()}\n                            >\n                                Connect\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"brightid-nft-mint-step__description\">\n                        {ensName && (\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>ENS: </strong>\n                                <span className=\"brightid-nft-mint-step__description-ens-address\">\n                                    {ensName}\n                                </span>\n                            </p>\n                        )}\n                        {walletAddress && (\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>Address: </strong>\n                                <span className=\"brightid-nft-mint-step__description-wallet-address\">\n                                    {walletAddress}\n                                </span>\n                            </p>\n                        )}\n                        {!walletAddress && (\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>Address: </strong>\n                                <span>Not Connected</span>\n                            </p>\n                        )}\n                    </div>\n                    <div className=\"brightid-nft-mint-step__feedback\">\n                        {stepConnectWalletError && (\n                            <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                {stepConnectWalletError}\n                            </div>\n                        )}\n                    </div>\n                </section>\n\n                {alreadyHoldsToken && (\n                    <section className={`brightid-nft-mint-step`}>\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Wallet Already Holds NFT\n                                </h2>\n                            </div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                It looks like this wallet already holds a\n                                BrightID Soulbound NFT. You need to connect a\n                                wallet which does not already hold one to rescue\n                                your lost wallet's NFT too.\n                            </p>\n                        </div>\n                    </section>\n                )}\n\n                {!alreadyHoldsToken && hasModeSelection() && (\n                    <section className={`brightid-nft-mint-step`}>\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Select the type of experience.\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action\">\n                                <button\n                                    className=\"brightid-nft-mint-step__button\"\n                                    onClick={() => setModeGas()}\n                                >\n                                    Gas\n                                </button>\n                                <button\n                                    className=\"brightid-nft-mint-step__button\"\n                                    onClick={() => setModeGasless()}\n                                >\n                                    Gasless\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>gas:</strong> you'll execute\n                                transactions on Gnosis Chain using xDAI for gas.\n                            </p>\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>gasless:</strong> We'll cover the gas\n                                fees for you, but you may experience rate\n                                limits.\n                            </p>\n                        </div>\n                        {mode && (\n                            <div className=\"brightid-nft-mint-step__description\">\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>\n                                        Current Mode:{\" \"}\n                                        <span className=\"brightid-nft-mint-step__important\">\n                                            {mode}\n                                        </span>\n                                    </strong>\n                                </p>\n                            </div>\n                        )}\n                    </section>\n                )}\n\n                {!alreadyHoldsToken && hasModeSelected() && !hasRelay() && (\n                    <section\n                        className={`\n                            brightid-nft-mint-step\n                            brightid-nft-mint-step--${getStepCompleteString(\n                                stepSwitchToMintNetworkComplete()\n                            )}\n                            brightid-nft-mint-step--${getStepActiveString(\n                                stepSwitchToMintNetworkActive()\n                            )}\n                        `}\n                    >\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__status\">\n                                <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Switch Wallet to {mintChainName}\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action\">\n                                {canAutoSwitchNetworks && (\n                                    <button\n                                        className=\"brightid-nft-mint-step__button\"\n                                        onClick={() => switchToMintNetwork()}\n                                    >\n                                        Switch\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        {stepConnectWalletComplete() && !canAutoSwitchNetworks && (\n                            <div\n                                className=\"\n                                brightid-nft-mint-step__description\n                                brightid-nft-mint-step__description--action\n                                brightid-nft-mint-step__description--action-hide-on-complete\n                            \"\n                            >\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    In your wallet app create a new network with\n                                    the following data and switch to that\n                                    network.\n                                </p>\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Network Name: </strong>\n                                    {mintChainName}\n                                </p>\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>RPC URL: </strong>\n                                    {mintRpcUrl}\n                                </p>\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Chain ID: </strong>\n                                    {mintChainId}\n                                </p>\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Currency Symbol: </strong>\n                                    {mintTokenName}\n                                </p>\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>Block Explorer URL: </strong>\n                                    {mintBlockExplorerUrl}\n                                </p>\n                            </div>\n                        )}\n                        <div className=\"brightid-nft-mint-step__feedback\">\n                            {stepSwitchToMintNetworkError && (\n                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                    {stepSwitchToMintNetworkError}\n                                </div>\n                            )}\n                        </div>\n                    </section>\n                )}\n\n                {!alreadyHoldsToken && hasModeSelected() && !hasRelay() && (\n                    <section\n                        className={`\n                            brightid-nft-mint-step\n                            brightid-nft-mint-step--${getStepCompleteString(\n                                stepObtainGasTokensComplete()\n                            )}\n                            brightid-nft-mint-step--${getStepActiveString(\n                                stepObtainGasTokensActive()\n                            )}\n                        `}\n                    >\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__status\">\n                                <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Obtain {mintTokenName} Gas Tokens\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action\">\n                                {stepSwitchToMintNetworkComplete() && (\n                                    <button\n                                        className=\"brightid-nft-mint-step__button\"\n                                        onClick={() => faucetClaim()}\n                                    >\n                                        Obtain\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            <p className=\"brightid-nft-mint-step__description-p\">\n                                <strong>Balance: </strong>\n                                <span className=\"brightid-nft-mint-step__description-balance\">\n                                    {gasBalance} {mintTokenName}\n                                </span>\n                            </p>\n                        </div>\n                    </section>\n                )}\n\n                {!alreadyHoldsToken && hasModeSelected() && (\n                    <section\n                        className={`\n                            brightid-nft-mint-step\n                            brightid-nft-mint-step--${getStepCompleteString(\n                                stepBindViaRelayComplete()\n                            )}\n                            brightid-nft-mint-step--${getStepActiveString(\n                                stepBindViaRelayActive()\n                            )}\n                        `}\n                    >\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__status\">\n                                <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Bind UUID\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action\">\n                                {hasRelay() && stepConnectWalletComplete() && (\n                                    <button\n                                        className=\"brightid-nft-mint-step__button\"\n                                        onClick={() => bindViaRelay(false)}\n                                        disabled={\n                                            stepBindViaRelayProcessing\n                                                ? true\n                                                : null\n                                        }\n                                    >\n                                        Bind\n                                    </button>\n                                )}\n                                {!hasRelay() && stepConnectWalletComplete() && (\n                                    <button\n                                        className=\"brightid-nft-mint-step__button\"\n                                        onClick={() =>\n                                            bindViaTransaction(false)\n                                        }\n                                        disabled={\n                                            stepBindViaRelayProcessing\n                                                ? true\n                                                : null\n                                        }\n                                    >\n                                        Bind\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"brightid-nft-mint-step__description\">\n                            {hasRelay() && (\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    In this step you will be asked to sign a\n                                    hash of the UUID below with your wallet.\n                                    This will bind the UUID to you.\n                                </p>\n                            )}\n                            {!hasRelay() && (\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    In this step you will be presented with two\n                                    prompts by your wallet. The first will ask\n                                    you to sign a hash of the UUID below. The\n                                    second will ask you to process the bind\n                                    transaction. You must complete both. This\n                                    will bind the UUID to you.\n                                </p>\n                            )}\n                            {uuidHex && (\n                                <p className=\"brightid-nft-mint-step__description-p\">\n                                    <strong>UUID: </strong>\n                                    <span className=\"brightid-nft-mint-step__description-wallet-address\">\n                                        {uuidHex}\n                                    </span>\n\n                                    {/* <span className=\"brightid-nft-mint-step__description-reset\">\n                                    If you have issues with this UUID you can\n                                    reset it.\n                                </span>\n                                <button\n                                    className=\"brightid-nft-mint-step__button brightid-nft-mint-step__button--small\"\n                                    onClick={() => resetUUID()}\n                                >\n                                    Reset\n                                </button> */}\n                                </p>\n                            )}\n                        </div>\n                        <div className=\"brightid-nft-mint-step__feedback\">\n                            {stepBindViaRelayStatus && (\n                                <div className=\"brightid-nft-mint-step__response\">\n                                    <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                        <div className=\"brightid-nft-mint-step__loading-icon\">\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                        </div>\n                                    </div>\n                                    <div className=\"brightid-nft-mint-step__response-message\">\n                                        <div>{stepBindViaRelayStatus}</div>\n                                    </div>\n                                </div>\n                            )}\n                            {stepBindViaRelayError && (\n                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                    {stepBindViaRelayError}\n                                </div>\n                            )}\n                            {isBoundViaContractTxnProcessing && (\n                                <div className=\"brightid-nft-mint-step__response\">\n                                    <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                        <div className=\"brightid-nft-mint-step__loading-icon\">\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                        </div>\n                                    </div>\n                                    <div className=\"brightid-nft-mint-step__response-message\">\n                                        <div>\n                                            Transaction is being processed...\n                                        </div>\n                                        <div>\n                                            <a\n                                                className=\"brightid-nft-mint-step__response-link\"\n                                                href={`${mintBlockExplorerUrl}${mintBlockExplorerTxnPath}${isBoundViaContractTxnId}`}\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                            >\n                                                View Transaction\n                                            </a>\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                            {stepBoundViaContractError && (\n                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                    {stepBoundViaContractError}\n                                </div>\n                            )}\n                            {stepBindViaRelayComplete() && (\n                                <div className=\"brightid-nft-mint-step__description\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        <strong>\n                                            Your UUID has been bound.\n                                        </strong>\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                    </section>\n                )}\n\n                {!alreadyHoldsToken && hasModeSelected() && (\n                    <section\n                        className={`\n                            brightid-nft-mint-step\n                            brightid-nft-mint-step--brightid-link\n                            brightid-nft-mint-step--${getStepCompleteString(\n                                stepUUIDLinkedComplete()\n                            )}\n                            brightid-nft-mint-step--${getStepActiveString(\n                                stepUUIDLinkedActive()\n                            )}\n                        `}\n                    >\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__status\">\n                                <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Link UUID to BrightID\n                                </h2>\n                            </div>\n                            {/* <div className=\"brightid-nft-mint-step__action\">\n                            <button\n                                className=\"brightid-nft-mint-step__button\"\n                                onClick={() => linkUUIDToBrightID()}\n                            >\n                                Link Address\n                            </button>\n                        </div> */}\n                        </div>\n                        {stepBindViaRelayComplete() && qrCodeUUIDUrl && (\n                            <div\n                                className=\"\n                                    brightid-nft-mint-step__description\n                                    brightid-nft-mint-step__description--action\n                                \"\n                            >\n                                <div className=\"brightid-nft-mint-step--mobile\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        If you're on your mobile device just use\n                                        this button to open BrightID and link\n                                        your wallet.\n                                    </p>\n                                    <p className=\"brightid-nft-mint-step__description-button-container\">\n                                        <button\n                                            className=\"brightid-nft-mint-step__button\"\n                                            onClick={() => linkUUIDToBrightID()}\n                                        >\n                                            Link Address\n                                        </button>\n                                    </p>\n                                    <div className=\"brightid-nft-mint-step__feedback\">\n                                        {linkUUIDToBrightIDError && (\n                                            <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                                {linkUUIDToBrightIDError}\n                                            </div>\n                                        )}\n                                    </div>\n                                    <p className=\"brightid-nft-mint-step--mobile\">\n                                        <br />\n                                    </p>\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        If BrightID is installed on another\n                                        device scan the QR code below with the\n                                        \"Scan a Code\" button in the BrightID\n                                        mobile app.\n                                    </p>\n                                </div>\n                                <div className=\"brightid-nft-mint-step--desktop\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        Use the \"Scan a Code\" button in the\n                                        BrightID app to scan the QR code below.\n                                    </p>\n                                </div>\n                                {/* <p className=\"brightid-nft-mint-step__description-qrcode-container\">\n                                {qrCodeUUIDUrl}\n                            </p> */}\n                                <p className=\"brightid-nft-mint-step__description-qrcode-container\">\n                                    <QRCode\n                                        renderAs=\"svg\"\n                                        size={200}\n                                        value={qrCodeUUIDUrl}\n                                    />\n                                </p>\n                                <div className=\"brightid-nft-mint-step--desktop\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        After linking, you'll get a confirmation\n                                        in the BrightID app. Then just wait\n                                        about 20-30 seconds and this website\n                                        will update to allow continuing to the\n                                        next step.\n                                    </p>\n                                </div>\n                            </div>\n                        )}\n                        <div className=\"brightid-nft-mint-step__feedback\"></div>\n                    </section>\n                )}\n\n                {!alreadyHoldsToken && hasModeSelected() && (\n                    <section\n                        className={`\n                        brightid-nft-mint-step\n                        brightid-nft-mint-step--${getStepCompleteString(\n                            stepRescueViaRelayComplete()\n                        )}\n                        brightid-nft-mint-step--${getStepActiveString(\n                            stepRescueViaRelayComplete() ||\n                                stepRescueViaRelayActive()\n                        )}\n                    `}\n                    >\n                        <div className=\"brightid-nft-mint-step__main\">\n                            <div className=\"brightid-nft-mint-step__status\">\n                                <div className=\"brightid-nft-mint-step__status-icon\"></div>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__header\">\n                                <h2 className=\"brightid-nft-mint-step__heading\">\n                                    Rescue NFT\n                                </h2>\n                            </div>\n                            <div className=\"brightid-nft-mint-step__action\"></div>\n                        </div>\n\n                        {stepConnectWalletComplete() &&\n                            stepBindViaRelayComplete() &&\n                            stepUUIDLinkedComplete() &&\n                            !stepRescueViaRelayComplete() && (\n                                <div\n                                    className=\"\n                                    brightid-nft-mint-step__description\n                                    brightid-nft-mint-step__description--action\n                                \"\n                                >\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        Enter the wallet address that contains\n                                        the NFT you are rescuing.\n                                    </p>\n                                    <p className=\"brightid-nft-mint-step__description-button-container\">\n                                        <input\n                                            autoComplete=\"off\"\n                                            className=\"brightid-nft-mint-step__input\"\n                                            type=\"text\"\n                                            onChange={(e) =>\n                                                handleRescueAddressChange(e)\n                                            }\n                                            placeholder=\"Enter wallet address to rescue from\"\n                                        />\n                                    </p>\n                                    <p className=\"brightid-nft-mint-step__description-button-container\">\n                                        {hasRelay() && (\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() => rescueViaRelay()}\n                                                disabled={\n                                                    stepRescueViaRelayProcessing ||\n                                                    allowBindRetry\n                                                        ? true\n                                                        : null\n                                                }\n                                            >\n                                                Rescue\n                                            </button>\n                                        )}\n                                        {!hasRelay() && (\n                                            <button\n                                                className=\"brightid-nft-mint-step__button\"\n                                                onClick={() =>\n                                                    rescueViaTransaction()\n                                                }\n                                                disabled={\n                                                    stepRescueViaRelayProcessing ||\n                                                    allowBindRetry\n                                                        ? true\n                                                        : null\n                                                }\n                                            >\n                                                Rescue\n                                            </button>\n                                        )}\n                                    </p>\n                                </div>\n                            )}\n\n                        <div className=\"brightid-nft-mint-step__feedback\">\n                            {stepRescueViaRelayStatus && (\n                                <div className=\"brightid-nft-mint-step__response\">\n                                    <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                        <div className=\"brightid-nft-mint-step__loading-icon\">\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                        </div>\n                                    </div>\n                                    <div className=\"brightid-nft-mint-step__response-message\">\n                                        <div>{stepRescueViaRelayStatus}</div>\n                                    </div>\n                                </div>\n                            )}\n                            {stepRescueViaRelayError && (\n                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                    {stepRescueViaRelayError}\n                                </div>\n                            )}\n                            {isMintedViaContractTxnProcessing && (\n                                <div className=\"brightid-nft-mint-step__response\">\n                                    <div className=\"brightid-nft-mint-step__response-loading-icon\">\n                                        <div className=\"brightid-nft-mint-step__loading-icon\">\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                            <div></div>\n                                        </div>\n                                    </div>\n                                    <div className=\"brightid-nft-mint-step__response-message\">\n                                        <div>\n                                            Transaction is being processed...\n                                        </div>\n                                        <div>\n                                            <a\n                                                className=\"brightid-nft-mint-step__response-link\"\n                                                href={`${mintBlockExplorerUrl}${mintBlockExplorerTxnPath}${isMintedViaContractTxnId}`}\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                            >\n                                                View Transaction\n                                            </a>\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                            {stepMintedViaContractError && (\n                                <div className=\"brightid-nft-mint-step__response brightid-nft-mint-step__response--error\">\n                                    {stepMintedViaContractError}\n                                </div>\n                            )}\n                            {allowBindRetry && (\n                                <div className=\"brightid-nft-mint-step__description\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        <strong>\n                                            Sorry it looks like your UUID failed\n                                            to bind properly. Please use this\n                                            retry button to rebind it and then\n                                            try minting again.\n                                        </strong>\n                                    </p>\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        {hasRelay() &&\n                                            stepConnectWalletComplete() && (\n                                                <button\n                                                    className=\"brightid-nft-mint-step__button\"\n                                                    onClick={() =>\n                                                        bindViaRelay(true)\n                                                    }\n                                                    disabled={\n                                                        stepBindViaRelayProcessing\n                                                            ? true\n                                                            : null\n                                                    }\n                                                >\n                                                    Retry Bind\n                                                </button>\n                                            )}\n                                        {!hasRelay() &&\n                                            stepConnectWalletComplete() && (\n                                                <button\n                                                    className=\"brightid-nft-mint-step__button\"\n                                                    onClick={() =>\n                                                        bindViaTransaction(true)\n                                                    }\n                                                    disabled={\n                                                        stepBindViaRelayProcessing\n                                                            ? true\n                                                            : null\n                                                    }\n                                                >\n                                                    Retry Bind\n                                                </button>\n                                            )}\n                                    </p>\n                                </div>\n                            )}\n                            {stepRescueViaRelayComplete() && (\n                                <div className=\"brightid-nft-mint-step__description\">\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        <strong>\n                                            Your NFT has been rescued.\n                                        </strong>\n                                    </p>\n                                    <p className=\"brightid-nft-mint-step__description-p\">\n                                        {walletAddress && (\n                                            <a\n                                                className=\"brightid-nft-mint-step__description-link\"\n                                                href={`https://epor.io/${walletAddress}`}\n                                                rel=\"noreferrer\"\n                                            >\n                                                View Your NFT Here\n                                            </a>\n                                        )}\n                                    </p>\n\n                                    {!hasRelay() &&\n                                        hasSwitchedToMintNetwork() && (\n                                            <p className=\"brightid-nft-mint-step__description-p\">\n                                                Before you leave you can use the\n                                                button below to switch your\n                                                wallet back to the Ethereum\n                                                mainnet.\n                                            </p>\n                                        )}\n                                    {!hasRelay() &&\n                                        hasSwitchedToMintNetwork() &&\n                                        canAutoSwitchNetworks && (\n                                            <p className=\"brightid-nft-mint-step__description-p\">\n                                                <button\n                                                    className=\"brightid-nft-mint-step__button\"\n                                                    onClick={() =>\n                                                        switchToMainnetNetwork()\n                                                    }\n                                                >\n                                                    Switch back to Mainnet\n                                                </button>\n                                            </p>\n                                        )}\n                                </div>\n                            )}\n                        </div>\n                    </section>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default BrightIDNftRescue;\n","import logo from \"./logo.png\";\nimport \"./App.css\";\nimport { BrightIDNftRescue } from \"./components/react-brightid-nft-mint/src\";\n// import { BrightIDNftRescue } from \"react-brightid-nft-mint\";\n\nfunction AppRescue() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img className=\"App-header__image\" src={logo} alt=\"Soulbound\" />\n            </header>\n            <main>\n                <div className=\"App-brightid-nft-mint\">\n                    <BrightIDNftRescue\n                        context=\"soulbound\"\n                        contractAddr=\"0x8884C28d13648128a7191Cb3C9Af7A9e14fCbF71\"\n                        // contractAddr=\"0x3F0FC15787511CCdc0bcc01950FCD13FFb4Ae95a\"\n                        // contractAddr=\"0x5bEeE3b35Df7AD8648E80EB52c47A481de086491\"\n                        mainnetRpcUrl=\"https://mainnet.infura.io/v3/60a7b2c16321439a917c9e74a994f7df\"\n                        walletConnectInfuraId=\"60a7b2c16321439a917c9e74a994f7df\"\n                        relayBindURL=\"https://brightid-nft-mint-relay.herokuapp.com/bind\"\n                        relayMintURL=\"https://brightid-nft-mint-relay.herokuapp.com/mint\"\n                        // relayBindURL=\"http://localhost:5001/brightid-nft-mint-relay/bind\"\n                        // relayMintURL=\"http://localhost:5001/brightid-nft-mint-relay/mint\"\n                        maxSupply=\"10000\"\n\n                        // appStoreAndroid=\"https://play.google.com/store/apps/details?id=org.brightid\"\n                        // appStoreIos=\"https://apps.apple.com/us/app/brightid/id1428946820\"\n                        // brightIdMeetUrl=\"https://meet.brightid.org\"\n                        // deepLinkPrefix=\"brightid://link-verification/http:%2f%2fnode.brightid.org\"\n                        // mintTokenFaucetUrl = \"https://www.gimlu.com/faucet\"\n                        // mintChainId = \"100\"\n                        // mintChainName = \"Gnosis Chain (formerly xDai)\"\n                        // mintTokenName = \"xDAI\"\n                        // mintTokenDecimal = \"18\"\n                        // mintBlockExplorerUrl = \"https://blockscout.com/xdai/mainnet\"\n                        // mintBlockExplorerTxnPath = \"/tx/\"\n                        // mintRpcUrl=\"https://rpc.gnosischain.com/\"\n                        // verificationUrl=\"https://app.brightid.org/node/v5/verifications\"\n                    />\n                </div>\n            </main>\n            <footer className=\"App-footer\">\n                &copy; 2022 BrightID - in collaboration with NFBeez\n            </footer>\n        </div>\n    );\n}\n\nexport default AppRescue;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport AppMint from \"./AppMint\";\nimport AppRescue from \"./AppRescue\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Routes>\n                {/* <Route path=\"/\" element={<AppMint />} /> */}\n                <Route path=\"/\" element={<AppRescue />} />\n                {/* <Route path=\"/mint\" element={<AppMint />} /> */}\n                {/* <Route path=\"/rescue\" element={<AppRescue />} /> */}\n            </Routes>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nclass BrightIDNftMintModel {\n    contractAbi = [\n        {\n            type: \"constructor\",\n            stateMutability: \"nonpayable\",\n            inputs: [\n                { type: \"address\", name: \"verifier\", internalType: \"address\" },\n                { type: \"bytes32\", name: \"context\", internalType: \"bytes32\" },\n                { type: \"string\", name: \"name_\", internalType: \"string\" },\n                { type: \"string\", name: \"symbol_\", internalType: \"string\" },\n            ],\n        },\n        {\n            type: \"event\",\n            name: \"AddressBound\",\n            inputs: [\n                {\n                    type: \"address\",\n                    name: \"addr\",\n                    internalType: \"address\",\n                    indexed: true,\n                },\n            ],\n            anonymous: false,\n        },\n        {\n            type: \"event\",\n            name: \"ContextSet\",\n            inputs: [\n                {\n                    type: \"bytes32\",\n                    name: \"context\",\n                    internalType: \"bytes32\",\n                    indexed: false,\n                },\n            ],\n            anonymous: false,\n        },\n        {\n            type: \"event\",\n            name: \"OwnershipTransferred\",\n            inputs: [\n                {\n                    type: \"address\",\n                    name: \"previousOwner\",\n                    internalType: \"address\",\n                    indexed: true,\n                },\n                {\n                    type: \"address\",\n                    name: \"newOwner\",\n                    internalType: \"address\",\n                    indexed: true,\n                },\n            ],\n            anonymous: false,\n        },\n        {\n            type: \"event\",\n            name: \"Transfer\",\n            inputs: [\n                {\n                    type: \"address\",\n                    name: \"from\",\n                    internalType: \"address\",\n                    indexed: true,\n                },\n                {\n                    type: \"address\",\n                    name: \"to\",\n                    internalType: \"address\",\n                    indexed: true,\n                },\n                {\n                    type: \"uint256\",\n                    name: \"tokenId\",\n                    internalType: \"uint256\",\n                    indexed: true,\n                },\n            ],\n            anonymous: false,\n        },\n        {\n            type: \"event\",\n            name: \"VerifierSet\",\n            inputs: [\n                {\n                    type: \"address\",\n                    name: \"verifier\",\n                    internalType: \"address\",\n                    indexed: false,\n                },\n            ],\n            anonymous: false,\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"uint256\", name: \"\", internalType: \"uint256\" }],\n            name: \"balanceOf\",\n            inputs: [\n                { type: \"address\", name: \"owner\", internalType: \"address\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"bind\",\n            inputs: [\n                { type: \"address\", name: \"owner\", internalType: \"address\" },\n                { type: \"bytes32\", name: \"uuidHash\", internalType: \"bytes32\" },\n                { type: \"uint256\", name: \"nonce\", internalType: \"uint256\" },\n                { type: \"bytes\", name: \"signature\", internalType: \"bytes\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"pure\",\n            outputs: [{ type: \"bytes32\", name: \"\", internalType: \"bytes32\" }],\n            name: \"getUUIDHash\",\n            inputs: [\n                { type: \"address\", name: \"owner\", internalType: \"address\" },\n                { type: \"bytes32\", name: \"uuidHash\", internalType: \"bytes32\" },\n                { type: \"uint256\", name: \"nonce\", internalType: \"uint256\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"pure\",\n            outputs: [{ type: \"bytes32\", name: \"\", internalType: \"bytes32\" }],\n            name: \"hashUUID\",\n            inputs: [\n                { type: \"bytes32\", name: \"uuid\", internalType: \"bytes32\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"mint\",\n            inputs: [\n                {\n                    type: \"bytes32[]\",\n                    name: \"contextIds\",\n                    internalType: \"bytes32[]\",\n                },\n                { type: \"uint256\", name: \"timestamp\", internalType: \"uint256\" },\n                { type: \"uint8\", name: \"v\", internalType: \"uint8\" },\n                { type: \"bytes32\", name: \"r\", internalType: \"bytes32\" },\n                { type: \"bytes32\", name: \"s\", internalType: \"bytes32\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"string\", name: \"\", internalType: \"string\" }],\n            name: \"name\",\n            inputs: [],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"address\", name: \"\", internalType: \"address\" }],\n            name: \"owner\",\n            inputs: [],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"address\", name: \"\", internalType: \"address\" }],\n            name: \"ownerOf\",\n            inputs: [\n                { type: \"uint256\", name: \"tokenId\", internalType: \"uint256\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"renounceOwnership\",\n            inputs: [],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"rescue\",\n            inputs: [\n                {\n                    type: \"bytes32[]\",\n                    name: \"contextIds\",\n                    internalType: \"bytes32[]\",\n                },\n                { type: \"uint256\", name: \"timestamp\", internalType: \"uint256\" },\n                { type: \"uint256\", name: \"tokenId\", internalType: \"uint256\" },\n                { type: \"uint8\", name: \"v\", internalType: \"uint8\" },\n                { type: \"bytes32\", name: \"r\", internalType: \"bytes32\" },\n                { type: \"bytes32\", name: \"s\", internalType: \"bytes32\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"rescue\",\n            inputs: [\n                {\n                    type: \"bytes32[]\",\n                    name: \"contextIds\",\n                    internalType: \"bytes32[]\",\n                },\n                { type: \"uint256\", name: \"timestamp\", internalType: \"uint256\" },\n                { type: \"uint256\", name: \"tokenId\", internalType: \"uint256\" },\n                { type: \"uint8\", name: \"v\", internalType: \"uint8\" },\n                { type: \"bytes32\", name: \"r\", internalType: \"bytes32\" },\n                { type: \"bytes32\", name: \"s\", internalType: \"bytes32\" },\n                { type: \"bytes\", name: \"data\", internalType: \"bytes\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"setContext\",\n            inputs: [\n                { type: \"bytes32\", name: \"context\", internalType: \"bytes32\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"setVerifier\",\n            inputs: [\n                { type: \"address\", name: \"verifier\", internalType: \"address\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"bool\", name: \"\", internalType: \"bool\" }],\n            name: \"supportsInterface\",\n            inputs: [\n                { type: \"bytes4\", name: \"interfaceId\", internalType: \"bytes4\" },\n            ],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"string\", name: \"\", internalType: \"string\" }],\n            name: \"symbol\",\n            inputs: [],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"pure\",\n            outputs: [{ type: \"string\", name: \"\", internalType: \"string\" }],\n            name: \"tokenURI\",\n            inputs: [{ type: \"uint256\", name: \"\", internalType: \"uint256\" }],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"view\",\n            outputs: [{ type: \"uint256\", name: \"\", internalType: \"uint256\" }],\n            name: \"totalSupply\",\n            inputs: [],\n        },\n        {\n            type: \"function\",\n            stateMutability: \"nonpayable\",\n            outputs: [],\n            name: \"transferOwnership\",\n            inputs: [\n                { type: \"address\", name: \"newOwner\", internalType: \"address\" },\n            ],\n        },\n    ];\n\n    web3Modal;\n\n    web3Instance;\n\n    walletAddress = \"\";\n\n    ensName = \"\";\n\n    chainId = 0;\n\n    gasBalance = 0.0;\n\n    totalSupply = 0;\n\n    maxSupply = 0;\n\n    brightIDLinkedWallets = [];\n\n    isBrightIDLinked = false;\n\n    isUUIDLinked = false;\n\n    isBoundViaContract = false;\n\n    isMintedViaContract = false;\n\n    context = \"\";\n\n    contractAddr = \"\";\n\n    mainnetRpcUrl = \"\";\n\n    walletConnectInfuraId = \"\";\n\n    relayBindURL = \"\";\n\n    relayMintURL = \"\";\n\n    appStoreAndroid = \"\";\n\n    appStoreIos = \"\";\n\n    brightIdMeetUrl = \"\";\n\n    deepLinkPrefix = \"\";\n\n    mintTokenFaucetUrl = \"\";\n\n    mintChainId = 0;\n\n    mintChainName = \"\";\n\n    mintTokenDecimal = 0;\n\n    mintTokenName = \"\";\n\n    mintBlockExplorerUrl = \"\";\n\n    mintBlockExplorerTxnPath = \"\";\n\n    mintRpcUrl = \"\";\n\n    verificationUrl = \"\";\n\n    uuid = \"\";\n\n    uuidHex = \"\";\n\n    uuidByte32 = \"\";\n\n    constructor(\n        statePrefix = \"\",\n        context = \"\",\n        contractAddr = \"\",\n        mainnetRpcUrl = \"\",\n        walletConnectInfuraId = \"\",\n        relayBindURL = \"\",\n        relayMintURL = \"\",\n        maxSupply = 0,\n        appStoreAndroid = \"https://play.google.com/store/apps/details?id=org.brightid\",\n        appStoreIos = \"https://apps.apple.com/us/app/brightid/id1428946820\",\n        brightIdMeetUrl = \"https://meet.brightid.org\",\n        deepLinkPrefix = \"brightid://link-verification/http:%2f%2fnode.brightid.org\",\n        mintTokenFaucetUrl = \"https://www.gimlu.com/faucet\",\n        mintChainId = 100,\n        mintChainName = \"Gnosis Chain (formerly xDai)\",\n        mintTokenName = \"xDAI\",\n        mintTokenDecimal = 18,\n        mintBlockExplorerUrl = \"https://blockscout.com/xdai/mainnet\",\n        mintBlockExplorerTxnPath = \"/tx/\",\n        mintRpcUrl = \"https://rpc.gnosischain.com\",\n        verificationUrl = \"https://app.brightid.org/node/v5/verifications\"\n    ) {\n        this.statePrefix = statePrefix;\n        this.context = context;\n        this.contractAddr = contractAddr;\n        this.mainnetRpcUrl = mainnetRpcUrl;\n        this.walletConnectInfuraId = walletConnectInfuraId;\n        this.relayBindURL = relayBindURL;\n        this.relayMintURL = relayMintURL;\n        this.maxSupply = maxSupply;\n\n        this.appStoreAndroid = appStoreAndroid;\n        this.appStoreIos = appStoreIos;\n        this.brightIdMeetUrl = brightIdMeetUrl;\n        this.deepLinkPrefix = deepLinkPrefix;\n        this.mintTokenFaucetUrl = mintTokenFaucetUrl;\n        this.mintChainId = Number(mintChainId);\n        this.mintChainName = mintChainName;\n        this.mintTokenDecimal = Number(mintTokenDecimal);\n        this.mintTokenName = mintTokenName;\n        this.mintBlockExplorerUrl = mintBlockExplorerUrl;\n        this.mintBlockExplorerTxnPath = mintBlockExplorerTxnPath;\n        this.mintRpcUrl = mintRpcUrl;\n        this.verificationUrl = verificationUrl;\n    }\n\n    resetWalletData() {\n        this.walletAddress = \"\";\n        this.ensName = \"\";\n        this.chainId = 0;\n        this.gasBalance = 0.0;\n        this.isBrightIDLinked = false;\n        this.isUUIDLinked = false;\n        this.isBoundViaContract = false;\n        this.isMintedViaContract = false;\n    }\n\n    /* Web3 Modal & Instances */\n    /* ---------------------------------------------------------------------- */\n\n    async initWeb3Modal() {\n        if (typeof this.web3Modal === \"object\") {\n            return;\n        }\n\n        console.log(\"initWeb3Modal\");\n\n        const providerOptions = {\n            walletconnect: {\n                package: WalletConnectProvider,\n                options: {\n                    infuraId: this.walletConnectInfuraId, // required\n                    rpc: {},\n                },\n            },\n        };\n\n        providerOptions.walletconnect.options.rpc[this.mintChainId] =\n            this.mintRpcUrl;\n\n        this.web3Modal = new Web3Modal({\n            network: \"mainnet\", // optional\n            cacheProvider: true, // optional\n            providerOptions, // required\n        });\n    }\n\n    async initInstance() {\n        if (typeof this.web3Instance === \"object\") {\n            return;\n        }\n\n        console.log(\"initInstance\");\n\n        await this.initWeb3Modal();\n\n        const web3Instance = await this.web3Modal.connect();\n\n        this.web3Instance = web3Instance;\n    }\n\n    async initFreshInstance() {\n        console.log(\"initFreshInstance\");\n\n        await this.initWeb3Modal();\n\n        await this.web3Modal.clearCachedProvider();\n        localStorage.removeItem(\"walletconnect\");\n        localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n        localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n\n        const web3Instance = await this.web3Modal.connect();\n\n        this.web3Instance = web3Instance;\n    }\n\n    /* Providers */\n    /* ---------------------------------------------------------------------- */\n\n    async getProvider() {\n        await this.initInstance();\n\n        return new ethers.providers.Web3Provider(this.web3Instance);\n    }\n\n    getMainnetProvider() {\n        return new ethers.providers.JsonRpcProvider(this.mainnetRpcUrl);\n    }\n\n    getRegistrationProvider() {\n        return new ethers.providers.JsonRpcProvider(this.mintRpcUrl);\n    }\n\n    /* Contracts */\n    /* ---------------------------------------------------------------------- */\n\n    async getRegistrationProviderContract() {\n        const provider = await this.getRegistrationProvider();\n\n        return new ethers.Contract(\n            this.contractAddr,\n            this.contractAbi,\n            provider\n        );\n    }\n\n    async getRegistrationProviderContractRw() {\n        const provider = await this.getRegistrationProvider();\n\n        return new ethers.Contract(\n            this.contractAddr,\n            this.contractAbi,\n            provider.getSigner()\n        );\n    }\n\n    async getContract() {\n        const provider = await this.getProvider();\n\n        return new ethers.Contract(\n            this.contractAddr,\n            this.contractAbi,\n            provider\n        );\n    }\n\n    async getContractRw() {\n        const provider = await this.getProvider();\n\n        return new ethers.Contract(\n            this.contractAddr,\n            this.contractAbi,\n            provider.getSigner()\n        );\n    }\n\n    /* Provider Feature Detection */\n    /* ---------------------------------------------------------------------- */\n\n    getProviderType() {\n        return JSON.parse(localStorage.getItem(\"WEB3_CONNECT_CACHED_PROVIDER\"));\n    }\n\n    canAutoSwitchNetworks() {\n        return this.getProviderType() !== \"walletconnect\";\n    }\n\n    hasReconnectableWallet() {\n        return (\n            this.getProviderType() === \"injected\" ||\n            this.getProviderType() === \"walletconnect\"\n        );\n    }\n\n    /* Data Query */\n    /* ---------------------------------------------------------------------- */\n\n    async getWalletAddress() {\n        if (\n            typeof this.walletAddress === \"string\" &&\n            this.walletAddress !== \"\"\n        ) {\n            return this.walletAddress;\n        }\n\n        console.log(\"getWalletAddress\");\n\n        this.walletAddress = await this.queryWalletAddress();\n\n        return this.walletAddress;\n    }\n\n    async getQrCodeUrl() {\n        const addr = await this.getWalletAddress();\n\n        return `${this.deepLinkPrefix}/${this.context}/${addr}`;\n    }\n\n    async getQrCodeUUIDUrl() {\n        return `${this.deepLinkPrefix}/${this.context}/${this.uuidHex}`;\n    }\n\n    async queryWalletAddress() {\n        try {\n            console.log(\"queryWalletAddress\");\n\n            const provider = await this.getProvider();\n\n            const accounts = await provider.listAccounts();\n\n            if (accounts.length === 0) {\n                throw new Error(\"No Wallet Address Found\");\n            }\n\n            return accounts[0];\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return \"\";\n        }\n    }\n\n    async queryENSName() {\n        try {\n            console.log(\"queryENSName\");\n\n            const addr = await this.getWalletAddress();\n\n            const provider = this.getMainnetProvider();\n\n            const name = await provider.lookupAddress(addr);\n\n            // console.log(name);\n\n            return name;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return \"\";\n        }\n    }\n\n    async queryChainId() {\n        try {\n            console.log(\"queryChainId\");\n\n            const provider = await this.getProvider();\n\n            const { chainId } = await provider.getNetwork();\n\n            return chainId;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return 0;\n        }\n    }\n\n    async queryGasBalance() {\n        try {\n            console.log(\"checkGas\");\n\n            const addr = await this.getWalletAddress();\n\n            const provider = await this.getRegistrationProvider();\n\n            const balanceRaw = await provider.getBalance(addr);\n\n            const balanceFormatted = await ethers.utils.formatEther(balanceRaw);\n\n            return parseFloat(balanceFormatted);\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return 0.0;\n        }\n    }\n\n    async queryTotalSupply() {\n        try {\n            console.log(\"queryTotalSupply\");\n\n            const contract = await this.getRegistrationProviderContract();\n\n            const totalSupply = await contract.totalSupply();\n\n            const totalSupplyDecimal = totalSupply.toString();\n\n            // console.log(totalSupply);\n            // console.log(totalSupplyDecimal);\n\n            return totalSupplyDecimal;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return 0;\n        }\n    }\n\n    async queryBrightIDLink(contextId) {\n        try {\n            console.log(\"queryBrightIDLink\");\n\n            const userVerificationUrl = `${this.verificationUrl}/${this.context}/${contextId}?signed=null&timestamp=null`;\n\n            // console.log(userVerificationUrl);\n\n            const request = new Request(userVerificationUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\",\n                },\n            });\n\n            const response = await fetch(request);\n\n            // console.log(response);\n\n            if (response.ok === true) {\n                const responseJson = await response.json();\n\n                // console.log(responseJson);\n\n                return (\n                    responseJson.data.contextIds[0].toLowerCase() ===\n                    contextId.toLowerCase()\n                );\n\n                // return true; // DEBUG\n            }\n\n            if (response.status === 403) {\n                return true;\n            }\n\n            return false;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return false;\n        }\n    }\n\n    async queryBrightIDSponsorship(contextId) {\n        try {\n            console.log(\"queryBrightIDSponsorship\");\n\n            const userVerificationUrl = `${this.verificationUrl}/${this.context}/${contextId}?signed=eth&timestamp=seconds`;\n\n            // console.log(userVerificationUrl);\n\n            const request = new Request(userVerificationUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\",\n                },\n            });\n\n            const response = await fetch(request);\n\n            // console.log(response);\n\n            return response.ok;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return false;\n        }\n    }\n\n    async queryTokenBalance() {\n        try {\n            console.log(\"queryTokenBalance\");\n\n            const addr = await this.getWalletAddress();\n\n            const contract = await this.getRegistrationProviderContract();\n\n            const balance = await contract.balanceOf(addr);\n\n            // console.log(balance);\n\n            return balance;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n\n            return 0;\n        }\n    }\n\n    async queryBrightIDSignature(contextId) {\n        try {\n            const userVerificationUrl = `${this.verificationUrl}/${this.context}/${contextId}?signed=eth&timestamp=seconds`;\n\n            // console.log(userVerificationUrl);\n\n            const request = new Request(userVerificationUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\",\n                },\n            });\n\n            const response = await fetch(request);\n\n            const body = await response.json();\n\n            if (response.ok === false) {\n                throw new Error(body.errorMessage);\n            }\n\n            return body;\n        } catch (e) {\n            throw new Error(e.message);\n        }\n    }\n\n    /* State Data Query */\n    /* ---------------------------------------------------------------------- */\n\n    async initWalletAddress() {\n        try {\n            console.log(\"initWalletAddress\");\n\n            this.walletAddress = await this.queryWalletAddress();\n\n            return this.walletAddress;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async initENSName() {\n        try {\n            this.ensName = await this.queryENSName();\n\n            return this.ensName;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async initChainId() {\n        try {\n            this.chainId = await this.queryChainId();\n\n            return this.chainId;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async initGasBalance() {\n        try {\n            this.gasBalance = await this.queryGasBalance();\n\n            return this.gasBalance;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async initTotalSupply() {\n        try {\n            this.totalSupply = await this.queryTotalSupply();\n\n            // this.totalSupply = 0; // DEBUG\n\n            return this.totalSupply;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    resetBoundUUID() {\n        sessionStorage.removeItem(`${this.statePrefix}-uuid-bound`);\n    }\n\n    setBoundUUID() {\n        sessionStorage.setItem(`${this.statePrefix}-uuid-bound`, this.uuid);\n    }\n\n    hasBoundUUID() {\n        return (\n            sessionStorage.getItem(`${this.statePrefix}-uuid`) ===\n            sessionStorage.getItem(`${this.statePrefix}-uuid-bound`)\n        );\n    }\n\n    async resetUUID() {\n        sessionStorage.removeItem(`${this.statePrefix}-uuid`);\n        this.resetBoundUUID();\n        await this.initUUID();\n    }\n\n    async initUUID() {\n        try {\n            const walletAddress = await this.queryWalletAddress();\n\n            if (sessionStorage.getItem(`${this.statePrefix}-wallet`) === null) {\n                sessionStorage.setItem(\n                    `${this.statePrefix}-wallet`,\n                    walletAddress\n                );\n            }\n\n            if (\n                sessionStorage.getItem(`${this.statePrefix}-wallet`) !==\n                walletAddress\n            ) {\n                sessionStorage.setItem(\n                    `${this.statePrefix}-wallet`,\n                    walletAddress\n                );\n\n                return await this.resetUUID();\n            }\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n            return await this.resetUUID();\n        }\n\n        if (sessionStorage.getItem(`${this.statePrefix}-uuid`) === null) {\n            const newUUID = this.generateUUID();\n\n            sessionStorage.setItem(`${this.statePrefix}-uuid`, newUUID);\n        }\n\n        if (sessionStorage.getItem(`${this.statePrefix}-uuid`) === null) {\n            const newUUID = this.generateUUID();\n\n            sessionStorage.setItem(`${this.statePrefix}-uuid`, newUUID);\n        }\n\n        this.uuid = sessionStorage.getItem(`${this.statePrefix}-uuid`);\n        // console.log(\"UUID\");\n        // console.log(this.uuid);\n\n        this.uuidHex = this.uuid.replaceAll(\"-\", \"\");\n        // console.log(\"UUID Hex\");\n        // console.log(this.uuidHex);\n\n        // this.uuidHex = \"a5e502211e8b406b8877e68a01063cfe\"; // DEBUG\n\n        this.uuidByte32 = \"0x\" + new Buffer(this.uuidHex).toString(\"hex\");\n        // console.log(\"UUID Bytes32\");\n        // console.log(this.uuidByte32);\n    }\n\n    generateUUID() {\n        // if (typeof crypto !== \"undefined\") {\n        //     console.log(\"crypto.randomUUID\");\n        //     return crypto.randomUUID();\n        // }\n\n        const number = ethers.BigNumber.from(ethers.utils.randomBytes(16));\n        const uuid = number.toHexString().replaceAll(\"0x\", \"\");\n\n        return uuid;\n    }\n\n    async initIsUUIDLinked() {\n        try {\n            this.isUUIDLinked = await this.queryBrightIDLink(this.uuidHex);\n\n            // this.isUUIDLinked = true; // DEBUG\n\n            return this.isUUIDLinked;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async initIsBoundViaContract() {\n        try {\n            this.isBoundViaContract = this.hasBoundUUID();\n\n            // this.isBoundViaContract = true; // DEBUG\n\n            return this.isBoundViaContract;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    async initIsMintedViaContract() {\n        try {\n            const balance = await this.queryTokenBalance();\n\n            this.isMintedViaContract = balance > 0;\n\n            // this.isMintedViaContract = false; // DEBUG\n\n            return this.isMintedViaContract;\n        } catch (e) {\n            // console.error(e);\n            // console.log(e);\n        }\n    }\n\n    /* Interactive Events */\n    /* ---------------------------------------------------------------------- */\n\n    async connectWallet() {\n        await this.initInstance();\n    }\n\n    async chooseWallet() {\n        await this.initFreshInstance();\n    }\n\n    async switchToMainnetNetwork() {\n        const provider = await this.getProvider();\n\n        return await provider.provider.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: \"0x1\" }],\n        });\n    }\n\n    async switchToMintNetwork() {\n        const mintHexChainId = ethers.utils.hexlify(Number(this.mintChainId));\n\n        const provider = await this.getProvider();\n\n        return await provider.provider.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: mintHexChainId }],\n        });\n    }\n\n    async addMintNetwork() {\n        const mintHexChainId = ethers.utils.hexlify(Number(this.mintChainId));\n\n        const provider = await this.getProvider();\n\n        return await provider.provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n                {\n                    chainId: mintHexChainId,\n                    chainName: this.mintChainName,\n                    nativeCurrency: {\n                        name: this.mintTokenName,\n                        symbol: this.mintTokenName,\n                        decimals: this.mintTokenDecimal,\n                    },\n                    rpcUrls: [this.mintRpcUrl],\n                    blockExplorerUrls: [this.mintBlockExplorerUrl],\n                    // iconUrls: [this.mintIconUrl],\n                },\n            ],\n        });\n    }\n\n    async getBindParams() {\n        const contract = await this.getRegistrationProviderContract();\n        const provider = await this.getProvider();\n\n        // console.log(this.uuid);\n        // console.log(this.uuidHex);\n        // console.log(this.uuidByte32);\n\n        const addr = await this.getWalletAddress();\n        // console.log(\"Wallet Address\");\n        // console.log(addr);\n\n        const uuidHash = await contract.hashUUID(this.uuidByte32);\n        // console.log(\"UUID Hash\");\n        // console.log(uuidHash);\n\n        const nonceBytes = ethers.utils.randomBytes(3);\n        const nonce = new Buffer(nonceBytes).readUIntBE(0, nonceBytes.length);\n        // console.log(\"nonce\");\n        // console.log(nonceBytes);\n        // console.log(nonce);\n\n        const hashToSign = await contract.getUUIDHash(addr, uuidHash, nonce);\n        // console.log(\"getUUIDHash\");\n        // console.log(hashToSign);\n\n        const bytesDataHash = ethers.utils.arrayify(hashToSign);\n        const rawSignature = await provider\n            .getSigner()\n            .signMessage(bytesDataHash);\n        const signature = this.standardizeSignature(rawSignature);\n        // console.log(\"signMessage\");\n        // console.log(rawSignature);\n        // console.log(signature);\n\n        console.log(\"pass to bind\");\n        console.log(\"--------------------------\");\n        console.log(addr);\n        console.log(uuidHash);\n        console.log(nonce);\n        console.log(signature);\n        console.log(\"--------------------------\");\n\n        return {\n            addr,\n            uuidHash,\n            nonce,\n            signature,\n        };\n    }\n\n    standardizeSignature(signature) {\n        if (signature.slice(-2) === \"00\") {\n            return signature.slice(0, -2) + \"1b\";\n        }\n\n        if (signature.slice(-2) === \"01\") {\n            return signature.slice(0, -2) + \"1c\";\n        }\n\n        return signature;\n    }\n\n    async getMintParams() {\n        const verificationData = await this.queryBrightIDSignature(\n            this.uuidHex\n        );\n\n        const contextIds = verificationData.data.contextIds;\n        const timestamp = verificationData.data.timestamp;\n        const v = verificationData.data.sig.v;\n        const r = \"0x\" + verificationData.data.sig.r;\n        const s = \"0x\" + verificationData.data.sig.s;\n\n        const contextIdsByte32 = contextIds.map((contextId) => {\n            return \"0x\" + new Buffer(contextId).toString(\"hex\");\n        });\n\n        console.log(\"pass to mint\");\n        console.log(\"-------------------------------\");\n        console.log(contextIds);\n        console.log(contextIdsByte32);\n        console.log(timestamp);\n        console.log(v);\n        console.log(r);\n        console.log(s);\n        console.log(\"-------------------------------\");\n\n        return {\n            contextIds,\n            contextIdsByte32,\n            timestamp,\n            v,\n            r,\n            s,\n        };\n    }\n\n    async getTokenId(addr) {\n        const provider = await this.getRegistrationProvider();\n        const contract = await this.getContract();\n\n        let filter = contract.filters.Transfer(null, addr);\n        // filter.fromBlock = 0;\n        filter.fromBlock = 21019766;\n\n        const logs = await provider.getLogs(filter);\n\n        if (logs.length === 0) {\n            throw new Error(\n                \"No NFTs could be found at the provided rescue address.\"\n            );\n        }\n\n        const lastLog = logs.pop();\n\n        const tokenIdHex = lastLog.topics[3];\n\n        const tokenId = parseInt(tokenIdHex, 16);\n\n        console.log(lastLog);\n        console.log(tokenIdHex);\n        console.log(tokenId);\n\n        return tokenId;\n    }\n\n    async getRescueParams(rescueFrom) {\n        const tokenId = await this.getTokenId(rescueFrom);\n\n        const verificationData = await this.queryBrightIDSignature(\n            this.uuidHex\n        );\n\n        const contextIds = verificationData.data.contextIds;\n        const timestamp = verificationData.data.timestamp;\n        const v = verificationData.data.sig.v;\n        const r = \"0x\" + verificationData.data.sig.r;\n        const s = \"0x\" + verificationData.data.sig.s;\n\n        const contextIdsByte32 = contextIds.map((contextId) => {\n            return \"0x\" + new Buffer(contextId).toString(\"hex\");\n        });\n\n        console.log(\"pass to mint\");\n        console.log(\"-------------------------------\");\n        console.log(contextIds);\n        console.log(contextIdsByte32);\n        console.log(timestamp);\n        console.log(v);\n        console.log(r);\n        console.log(s);\n        console.log(\"-------------------------------\");\n\n        return {\n            contextIds,\n            contextIdsByte32,\n            timestamp,\n            tokenId,\n            v,\n            r,\n            s,\n        };\n    }\n\n    async getMintRelayParams() {\n        const addr = await this.getWalletAddress();\n        const uuid = this.uuidHex;\n\n        console.log(\"pass to mint relay\");\n        console.log(\"-------------------------------\");\n        console.log(addr);\n        console.log(uuid);\n        console.log(\"-------------------------------\");\n\n        return {\n            addr,\n            uuid,\n        };\n    }\n\n    async bindViaTransaction() {\n        const chainId = await this.initChainId();\n\n        if (chainId !== Number(this.mintChainId)) {\n            throw new Error(\n                `Please switch to \"${this.mintChainName}\" (chainId: ${this.mintChainId})`\n            );\n        }\n\n        const bindParams = await this.getBindParams();\n\n        const contract = await this.getContractRw();\n\n        return await contract.bind(\n            bindParams.addr,\n            bindParams.uuidHash,\n            bindParams.nonce,\n            bindParams.signature\n        );\n    }\n\n    async mintViaTransaction() {\n        const chainId = await this.initChainId();\n\n        if (chainId !== Number(this.mintChainId)) {\n            throw new Error(\n                `Please switch to the ${this.mintChainName} network (chainId: ${this.mintChainId}) first.`\n            );\n        }\n\n        const mintParams = await this.getMintParams();\n\n        const contract = await this.getContractRw();\n\n        return await contract.mint(\n            mintParams.contextIdsByte32,\n            mintParams.timestamp,\n            mintParams.v,\n            mintParams.r,\n            mintParams.s\n        );\n    }\n\n    async rescueViaTransaction(rescueFrom) {\n        const chainId = await this.initChainId();\n\n        if (chainId !== Number(this.mintChainId)) {\n            throw new Error(\n                `Please switch to the ${this.mintChainName} network (chainId: ${this.mintChainId}) first.`\n            );\n        }\n\n        const rescueParams = await this.getRescueParams(rescueFrom);\n\n        const contract = await this.getContractRw();\n\n        return await contract[\n            \"rescue(bytes32[],uint256,uint256,uint8,bytes32,bytes32)\"\n        ](\n            rescueParams.contextIdsByte32,\n            rescueParams.timestamp,\n            rescueParams.tokenId,\n            rescueParams.v,\n            rescueParams.r,\n            rescueParams.s\n        );\n    }\n\n    async bindViaRelay() {\n        const bindParams = await this.getBindParams();\n\n        const request = new Request(this.relayBindURL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n            },\n            body: JSON.stringify(bindParams),\n        });\n\n        return await fetch(request);\n    }\n\n    async mintViaRelay() {\n        const mintParams = await this.getMintRelayParams();\n\n        const request = new Request(this.relayMintURL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n            },\n            body: JSON.stringify(mintParams),\n        });\n\n        return await fetch(request);\n    }\n\n    async rescueViaRelay(rescueFrom) {\n        throw new Error(\"Not implemented\");\n    }\n\n    getBindErrorMessage(error) {\n        const errorMessage = this.getErrorMessage(error);\n\n        return this.decodeErrorMessage(errorMessage);\n    }\n\n    getMintErrorMessage(error) {\n        const errorMessage = this.getErrorMessage(error);\n\n        return this.decodeErrorMessage(errorMessage);\n    }\n\n    decodeErrorMessage(errorMessage) {\n        if (errorMessage.slice(0, 9) === \"Reverted \") {\n            const errorCode = errorMessage.slice(9);\n\n            const decodedMessage = ethers.utils.toUtf8String(errorCode);\n\n            return decodedMessage;\n        }\n\n        return errorMessage;\n    }\n\n    getErrorMessage(error) {\n        if (\n            typeof error.data !== \"undefined\" &&\n            typeof error.data.message !== \"undefined\" &&\n            error.data.message.slice(0, 9) === \"Reverted \"\n        ) {\n            return error.data.message;\n        }\n\n        if (typeof error.message !== \"undefined\") {\n            return error.message;\n        }\n\n        return error;\n    }\n\n    getIsUUIDAlreadyBoundError(error) {\n        const errorMessage = this.getBindErrorMessage(error);\n\n        return errorMessage.includes(\"UUID already bound\");\n    }\n\n    getIsUUIDUnboundError(error) {\n        const errorMessage = this.getMintErrorMessage(error);\n\n        // return errorMessage.includes(\"This BrightID had minted\"); // DEBUG\n\n        return errorMessage.includes(\"balance query for the zero address\");\n    }\n}\n\nexport default BrightIDNftMintModel;\n"],"sourceRoot":""}